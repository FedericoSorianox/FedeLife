/**
 * ü§ñ SERVICIO DE IA PARA NEXT.JS
 *
 * Servicio simplificado de IA para usar en Next.js API Routes
 * Incluye funciones b√°sicas de an√°lisis de texto con OpenAI
 */

import Category from '@/lib/models/Category';

/**
 * Interface para objetos de gasto identificados por IA
 */
interface ExpenseItem {
  description: string;
  amount: number;
  currency: string;
  category: string;
  date: string;
  confidence?: number;
}

const OPENAI_API_KEY = process.env.OPENAI_API_KEY;
const OPENAI_API_URL = 'https://api.openai.com/v1/chat/completions';

if (!OPENAI_API_KEY) {
  console.error('‚ùå ERROR: OPENAI_API_KEY no est√° configurada');
}

/**
 * Obtiene las categor√≠as de gastos disponibles desde la base de datos
 * @param userId - ID del usuario (opcional, para categor√≠as personalizadas)
 * @returns Array de categor√≠as de gastos
 */
export async function getExpenseCategories(userId?: string) {
  try {
    // Categor√≠as por defecto del sistema
    const defaultCategories = [
      { name: 'Alimentaci√≥n', description: 'supermercados, restaurantes, comida, delivery' },
      { name: 'Transporte', description: 'combustible, taxis, transporte p√∫blico, Uber, mec√°nico' },
      { name: 'Servicios', description: 'internet, tel√©fono, luz, agua, gas, cable, seguros' },
      { name: 'Entretenimiento', description: 'cine, juegos, streaming, hobbies, deportes, bares' },
      { name: 'Salud', description: 'm√©dicos, farmacias, seguros m√©dicos, cl√≠nicas, laboratorios' },
      { name: 'Educaci√≥n', description: 'cursos, libros, material educativo, universidades' },
      { name: 'Ropa', description: 'vestimenta, calzado, accesorios, limpieza de ropa' },
      { name: 'Otros Gastos', description: 'SOLO para gastos que NO encajan en ninguna categor√≠a anterior' }
    ];

    // Si se proporciona userId, tambi√©n obtener categor√≠as personalizadas
    if (userId) {
      try {
        const customCategories = await Category.find({
          userId: userId,
          type: 'expense',
          isActive: true
        }).select('name description').lean();

        // Combinar categor√≠as por defecto con personalizadas
        const userCategories = [...defaultCategories];

        customCategories.forEach((customCat: any) => {
          // Solo agregar si no existe ya en las por defecto
          if (!defaultCategories.some(defCat => defCat.name === customCat.name)) {
            userCategories.push({
              name: customCat.name,
              description: customCat.description || 'Categor√≠a personalizada'
            });
          }
        });

        return userCategories;
      } catch (error) {
        console.warn('‚ö†Ô∏è Error obteniendo categor√≠as personalizadas, usando solo las por defecto:', error);
        return defaultCategories;
      }
    }

    return defaultCategories;
  } catch (error) {
    console.error('‚ùå Error obteniendo categor√≠as de gastos:', error);
    return [];
  }
}

/**
 * Analiza texto con OpenAI usando API Key del entorno
 * @param text - Texto a analizar
 * @param userId - ID del usuario (para contexto y categor√≠as personalizadas)
 * @returns An√°lisis de gastos con estructura {expenses: [...], confidence: number}
 */
export async function analyzeTextWithEnvKey(text: string, userId: string) {
  try {
    console.log('ü§ñ Analizando texto con OpenAI (API Key del entorno)...');

    // Verificar que tenemos la API key del entorno
    if (!OPENAI_API_KEY) {
      throw new Error('OPENAI_API_KEY no est√° configurada en las variables de entorno');
    }

    console.log('üîë API Key del entorno validada correctamente');

    // Obtener categor√≠as din√°micamente desde la base de datos
    console.log('üìÇ Obteniendo categor√≠as para an√°lisis...');
    const categories = await getExpenseCategories(userId);

    // Construir la lista de categor√≠as para el prompt
    const categoryList = categories.map(cat => `   - ${cat.name} (${cat.description})`).join('\n');

    console.log(`üìÇ Se encontraron ${categories.length} categor√≠as disponibles para el usuario`);

    // Preparar prompt para OpenAI
    const systemPrompt = `Eres un analista financiero experto especializado en el an√°lisis de estados de cuenta bancarios uruguayos.

Tu tarea es analizar el texto de un estado de cuenta bancario y extraer √öNICAMENTE los GASTOS (d√©bitos/salidas de dinero) - IGNORAR COMPLETAMENTE ingresos, cr√©ditos y transferencias entrantes.

INSTRUCCIONES ESPEC√çFICAS PARA TABLAS BANCARIAS URUGUAYAS:
1. IDENTIFICACI√ìN DE GASTOS:
   - SOLO considera transacciones que aparecen en columnas "D√©bito" o similares
   - IGNORA completamente cualquier monto en columnas "Cr√©dito"
   - Busca patrones como: monto en columna d√©bito + descripci√≥n del gasto
   - Ejemplos de gastos: compras, pagos, extracciones, d√©bitos autom√°ticos

2. PROCESA TODOS los gastos que encuentres en columnas d√©bito, incluso si hay muchos

3. EXTRACCI√ìN DE DATOS:
   - Busca el formato t√≠pico: Fecha | Concepto/Descripci√≥n | D√©bito | Cr√©dito | Saldo
   - Toma el monto de la columna "D√©bito" (nunca de "Cr√©dito")
   - La descripci√≥n suele estar en la columna "Concepto"

4. REGLAS DE MONEDA PARA URUGUAY:
   - En Uruguay, los montos pueden estar en UYU (pesos) o USD (d√≥lares)
   - Los montos en UYU suelen ser de 3-6 d√≠gitos (ej: 1.250, 45.000)
   - Los montos en USD suelen ser menores (ej: 25.50, 150.00)
   - Regla general: montos > 500 probablemente UYU, montos < 500 probablemente USD
   - Si el texto menciona expl√≠citamente "USD", "d√≥lares", o s√≠mbolos como "U$S", es USD
   - Si menciona "pesos", "UYU", o s√≠mbolos como "$UY", es UYU
   - Para montos entre 100-1000, analiza el contexto (comercios internacionales suelen ser USD)

5. CATEGORIZACI√ìN:
   - Usa EXACTAMENTE estas categor√≠as de la base de datos:
${categoryList}
   - Nunca uses "Otros" como categor√≠a, usa "Otros Gastos"
   - Nunca inventes categor√≠as nuevas

FORMATO DE SALIDA REQUERIDO:
Devuelve √öNICAMENTE un objeto JSON v√°lido con esta estructura exacta:
{
  "expenses": [
    {
      "description": "descripci√≥n exacta del gasto",
      "amount": 123.45,
      "currency": "UYU" o "USD",
      "category": "una de las categor√≠as listadas arriba",
      "date": "YYYY-MM-DD"
    }
  ],
  "confidence": 0.85
}

IMPORTANTE:
- Fecha en formato YYYY-MM-DD
- Monto como n√∫mero (sin s√≠mbolos)
- Usa nombres de categor√≠as exactos
- Devuelve TODOS los gastos encontrados
- Si no hay gastos, devuelve array vac√≠o
- Confidence entre 0 y 1`;

    const userPrompt = `Analiza el siguiente texto de estado de cuenta bancario uruguayo y extrae √öNICAMENTE los gastos (d√©bitos) - IGNORA cr√©ditos e ingresos:

${text}

INSTRUCCIONES ESPEC√çFICAS PARA TABLAS BANCARIAS:
- Busca el formato: Fecha | Concepto | D√©bito | Cr√©dito | Saldo
- SOLO toma montos de la columna "D√©bito" - ignora completamente "Cr√©dito"
- Cada l√≠nea con monto en d√©bito es un gasto potencial
- Busca descripciones como: COMPRA, PAGO, EXTRACCI√ìN, D√âBITO AUTOM√ÅTICO
- Ignora l√≠neas como: DEP√ìSITO, TRANSFERENCIA, CR√âDITO, INGRESO
- Procesa TODOS los gastos encontrados, incluso si hay muchos
- Convierte fechas de formato DD/MM/YYYY a YYYY-MM-DD
- S√© espec√≠fico con nombres de comercios: "SUPERMERCADO", "RESTORAN", etc.
- NO trunques la lista, incluye CADA gasto encontrado`;

    console.log('üöÄ Enviando solicitud a OpenAI...');

    const response = await fetch(OPENAI_API_URL, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${OPENAI_API_KEY}`
      },
      body: JSON.stringify({
        model: 'gpt-4o-mini',
        messages: [
          { role: 'system', content: systemPrompt },
          { role: 'user', content: userPrompt }
        ],
        max_tokens: 8000,
        temperature: 0.1
      })
    });

    if (!response.ok) {
      const errorText = await response.text();
      console.error('‚ùå Error en OpenAI API:', response.status, errorText);
      throw new Error(`Error en OpenAI API: ${response.status} - ${errorText}`);
    }

    const data = await response.json();
    console.log('üì• Respuesta recibida de OpenAI');

    let result;
    try {
      // Extraer JSON de la respuesta
      const content = data.choices[0].message.content.trim();

      // Buscar JSON en la respuesta (puede tener texto adicional)
      const jsonMatch = content.match(/\{[\s\S]*\}/);
      if (!jsonMatch) {
        throw new Error('No se encontr√≥ JSON v√°lido en la respuesta');
      }

      result = JSON.parse(jsonMatch[0]);
      console.log('‚úÖ JSON parseado correctamente');

    } catch (parseError) {
      console.error('‚ùå Error parseando respuesta JSON:', parseError);
      console.log('üìÑ Contenido de la respuesta:', data.choices[0].message.content);
      throw new Error('La respuesta de OpenAI no tiene el formato JSON esperado');
    }

    // Validar estructura del resultado
    if (!result.expenses || !Array.isArray(result.expenses)) {
      console.warn('‚ö†Ô∏è La respuesta no tiene el formato esperado, intentando reparar...');
      result = { expenses: [], confidence: 0.0 };
    }

    // Asegurar que todos los gastos tengan los campos requeridos
    result.expenses = result.expenses.map((expense: any) => ({
      description: expense.description || 'Gasto sin descripci√≥n',
      amount: parseFloat(expense.amount) || 0,
      currency: expense.currency || 'UYU',
      category: expense.category || 'Otros Gastos',
      date: expense.date || new Date().toISOString().split('T')[0],
      confidence: expense.confidence || result.confidence || 0.8
    }));

    console.log(`‚úÖ An√°lisis completado: ${result.expenses.length} gastos identificados`);
    return result;

  } catch (error) {
    console.error('‚ùå Error en an√°lisis con OpenAI:', error);

    // Estrategia de respaldo: an√°lisis b√°sico sin IA
    console.log('üîÑ Usando estrategia de respaldo (an√°lisis b√°sico)...');

    const basicAnalysis = await performBasicExpenseAnalysis(text);
    return {
      expenses: basicAnalysis.expenses,
      confidence: 0.3, // Baja confianza para an√°lisis b√°sico
      analysisType: 'basic_fallback'
    };
  }
}

/**
 * Analiza texto largo dividi√©ndolo en chunks y procesando cada uno
 * @param text - Texto largo a analizar
 * @param userId - ID del usuario
 * @returns An√°lisis combinado de todos los chunks
 */
export async function analyzeLargeTextInChunks(text: string, userId: string) {
  try {
    console.log('üìÑ Procesando texto largo en chunks...');

    const MAX_CHUNK_SIZE = 80000; // Tama√±o aumentado para aprovechar mejor los tokens disponibles

    // Dividir el texto en chunks
    const chunks = [];
    for (let i = 0; i < text.length; i += MAX_CHUNK_SIZE) {
      chunks.push(text.slice(i, i + MAX_CHUNK_SIZE));
    }

    console.log(`üìÑ Texto dividido en ${chunks.length} chunks`);

    // Analizar cada chunk
    const analyses = [];
    for (let i = 0; i < chunks.length; i++) {
      console.log(`üìÑ Procesando chunk ${i + 1}/${chunks.length}...`);
      const chunkResult = await analyzeTextWithEnvKey(chunks[i], userId);
      analyses.push(chunkResult);
    }

    // Combinar los resultados
    if (analyses.length === 1) {
      return analyses[0];
    }

    // Si hay m√∫ltiples an√°lisis, combinarlos
    console.log('üîÑ Combinando resultados de m√∫ltiples chunks...');

    const combinedExpenses: ExpenseItem[] = [];
    let totalConfidence = 0;

    analyses.forEach(analysis => {
      if (analysis.expenses && Array.isArray(analysis.expenses)) {
        combinedExpenses.push(...analysis.expenses);
      }
      totalConfidence += analysis.confidence || 0;
    });

    // Calcular confianza promedio
    const averageConfidence = totalConfidence / analyses.length;

    // Eliminar duplicados basados en descripci√≥n y monto (con tolerancia)
    const uniqueExpenses: ExpenseItem[] = [];
    const seen = new Set();

    combinedExpenses.forEach(expense => {
      const key = `${expense.description}-${expense.amount}-${expense.date}`;
      if (!seen.has(key)) {
        seen.add(key);
        uniqueExpenses.push(expense);
      }
    });

    console.log(`‚úÖ Combinaci√≥n completada: ${uniqueExpenses.length} gastos √∫nicos de ${combinedExpenses.length} totales`);

    return {
      expenses: uniqueExpenses,
      confidence: averageConfidence,
      analysisType: 'chunked_analysis'
    };

  } catch (error) {
    console.error('‚ùå Error analizando texto largo en chunks:', error);
    throw error;
  }
}

/**
 * An√°lisis b√°sico de respaldo cuando falla la IA
 * @param text - Texto a analizar
 * @returns An√°lisis b√°sico con gastos identificados por patrones simples
 */
async function performBasicExpenseAnalysis(text: string) {
  try {
    console.log('üîç Realizando an√°lisis b√°sico de respaldo...');

    const expenses: ExpenseItem[] = [];
    const lines = text.split('\n');

    // Patrones mejorados para detectar gastos en tablas bancarias
    const expensePatterns = [
      // Patr√≥n espec√≠fico para tablas: monto seguido de descripci√≥n
      /(\d+[\.,]\d+)\s+([A-Z\s]+?)\s*$/gi,
      // Patrones espec√≠ficos de operaciones bancarias uruguayas
      /(COMPRA|PAGO|EXTRACCI[O√ì]N|D[E√â]BITO)\s+(.+?)\s+(\d+[\.,]\d*)/gi,
      /([A-Z\s]{3,})\s+(\d+[\.,]\d*)\s*$/gi,
      // Patr√≥n para montos en columnas d√©bito
      /(\d+[\.,]\d*)\s+[A-Z\s]{3,}/gi
    ];

    lines.forEach(line => {
      expensePatterns.forEach(pattern => {
        let match;
        while ((match = pattern.exec(line)) !== null) {
          const description = match[1]?.trim() || 'Gasto identificado';
          const amountStr = match[2]?.replace(/[$,]/g, '') || '0';
          const amount = parseFloat(amountStr);

          if (amount > 0) {
            // Mejorar detecci√≥n de moneda para Uruguay
            let currency = 'UYU'; // Por defecto pesos uruguayos
            if (amount < 190) {
              currency = 'USD'; // Montos peque√±os probablemente d√≥lares
            }

            expenses.push({
              description,
              amount,
              currency,
              category: 'Otros Gastos',
              date: new Date().toISOString().split('T')[0]
            });
          }
        }
      });
    });

    console.log(`‚úÖ An√°lisis b√°sico completado: ${expenses.length} gastos identificados`);
    return { expenses };

  } catch (error) {
    console.error('‚ùå Error en an√°lisis b√°sico:', error);
    return { expenses: [] as ExpenseItem[] };
  }
}

/**
 * Procesa consultas avanzadas de IA
 */
export async function processAdvancedQuery(query: string, context: any = {}): Promise<string> {
  try {
    const prompt = `Eres un asistente financiero inteligente. Responde a la siguiente consulta del usuario de manera √∫til y precisa.

Contexto del usuario:
${JSON.stringify(context, null, 2)}

Consulta: ${query}

Proporciona una respuesta clara, concisa y √∫til. Si es necesario, incluye consejos financieros pr√°cticos.`;

    return await analyzeTextWithEnvKey(query, prompt);
  } catch (error) {
    console.error('Error processing advanced query:', error);
    throw error;
  }
}
