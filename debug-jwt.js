#!/usr/bin/env node

/**
 * üîß DEBUG JWT - Script para diagnosticar problemas de autenticaci√≥n JWT
 *
 * Uso: node debug-jwt.js
 *
 * Este script verifica:
 * - Configuraci√≥n de JWT en el servidor
 * - Generaci√≥n y verificaci√≥n de tokens
 * - Comparaci√≥n entre entornos
 */

const jwt = require('jsonwebtoken');

// Configuraci√≥n JWT
const JWT_SECRET = process.env.JWT_SECRET || 'fede-life-secret-key';
const JWT_NO_EXPIRE = process.env.JWT_NO_EXPIRE === 'true';

console.log('üîß DEBUG JWT - Diagn√≥stico de problemas de autenticaci√≥n\n');

// 1. Verificar configuraci√≥n
console.log('üìã 1. CONFIGURACI√ìN JWT:');
console.log('   JWT_SECRET configurado:', !!process.env.JWT_SECRET);
console.log('   JWT_SECRET longitud:', JWT_SECRET.length);
console.log('   JWT_NO_EXPIRE:', JWT_NO_EXPIRE);
console.log('   NODE_ENV:', process.env.NODE_ENV || 'development');
console.log();

// 2. Generar token de prueba
console.log('üîë 2. GENERANDO TOKEN DE PRUEBA:');
const testPayload = {
    id: '507f1f77bcf86cd799439011',
    username: 'test_user',
    email: 'test@fedelife.com',
    firstName: 'Test',
    lastName: 'User'
};

const options = JWT_NO_EXPIRE ? { noTimestamp: true } : { expiresIn: '7d' };

try {
    const testToken = jwt.sign(testPayload, JWT_SECRET, options);
    console.log('   ‚úÖ Token generado correctamente');
    console.log('   üìÑ Token (primeros 50 chars):', testToken.substring(0, 50) + '...');
    console.log('   üìè Longitud del token:', testToken.length);

    // 3. Verificar token generado
    console.log('\nüîç 3. VERIFICANDO TOKEN GENERADO:');
    const decoded = jwt.verify(testToken, JWT_SECRET);
    console.log('   ‚úÖ Token verificado correctamente');
    console.log('   üë§ Usuario decodificado:', decoded.username);
    console.log('   üÜî ID:', decoded.id);

    // 4. Probar con token inv√°lido
    console.log('\n‚ùå 4. PROBANDO CON TOKEN INV√ÅLIDO:');
    const invalidToken = testToken + 'invalid';
    try {
        jwt.verify(invalidToken, JWT_SECRET);
        console.log('   ‚ùå ERROR: Token inv√°lido fue aceptado');
    } catch (error) {
        console.log('   ‚úÖ Token inv√°lido correctamente rechazado:', error.message);
    }

    // 5. Probar con clave secreta diferente
    console.log('\nüîê 5. PROBANDO CON CLAVE DIFERENTE:');
    const wrongSecret = 'wrong-secret-key';
    try {
        jwt.verify(testToken, wrongSecret);
        console.log('   ‚ùå ERROR: Token con clave diferente fue aceptado');
    } catch (error) {
        console.log('   ‚úÖ Token con clave diferente correctamente rechazado');
        console.log('   üìù Error esperado:', error.message);
    }

    console.log('\n‚úÖ DIAGN√ìSTICO COMPLETADO');
    console.log('üìä RESUMEN:');
    console.log('   - Configuraci√≥n JWT: OK');
    console.log('   - Generaci√≥n de tokens: OK');
    console.log('   - Verificaci√≥n de tokens: OK');
    console.log('   - Rechazo de tokens inv√°lidos: OK');

    console.log('\nüí° RECOMENDACIONES:');
    if (!process.env.JWT_SECRET) {
        console.log('   ‚ö†Ô∏è  Configura JWT_SECRET en variables de entorno para producci√≥n');
    }
    if (JWT_NO_EXPIRE) {
        console.log('   ‚ö†Ô∏è  JWT_NO_EXPIRE est√° activado (solo para desarrollo)');
    }

} catch (error) {
    console.log('\n‚ùå ERROR EN DIAGN√ìSTICO:');
    console.log('   Error:', error.message);
    console.log('   Stack:', error.stack);
}

console.log('\nüéØ PR√ìXIMOS PASOS:');
console.log('   1. Si est√°s en producci√≥n, configura JWT_SECRET');
console.log('   2. Limpia tokens antiguos del navegador');
console.log('   3. Haz un nuevo login');
console.log('   4. Verifica que las categor√≠as se crean correctamente');
