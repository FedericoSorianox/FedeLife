/**
 * ü§ñ SERVICIO DE IA - FEDE LIFE
 *
 * Servicio para an√°lisis de PDFs usando OpenAI (GPT)
 * Incluye extracci√≥n de texto y an√°lisis de gastos
 * Autor: Senior Backend Developer
 */

const fs = require('fs');
const path = require('path');

// ==================== CONFIGURACI√ìN ====================

// Configuraci√≥n de OpenAI
const OPENAI_API_KEY = process.env.OPENAI_API_KEY;
const OPENAI_API_URL = 'https://api.openai.com/v1/chat/completions';

if (!OPENAI_API_KEY) {
    console.error('‚ùå ERROR: OPENAI_API_KEY no est√° configurada en las variables de entorno');
    console.error('üí° Configura OPENAI_API_KEY en tu archivo .env');
}

// ==================== FUNCIONES PRINCIPALES ====================

/**
 * Extrae texto de un archivo PDF usando PDF-lib
 * @param {string} filePath - Ruta del archivo PDF
 * @returns {Promise<string>} Texto extra√≠do del PDF
 */
async function extractTextFromPDF(filePath) {
    try {
        console.log(`üìÑ Extrayendo texto de: ${filePath}`);

        // Verificar que el archivo existe
        if (!fs.existsSync(filePath)) {
            throw new Error(`Archivo PDF no encontrado: ${filePath}`);
        }

        // Leer el archivo como buffer
        const pdfBuffer = fs.readFileSync(filePath);
        console.log(`üìÑ Archivo PDF cargado: ${pdfBuffer.length} bytes`);

        // Para este ejemplo, vamos a intentar extraer texto b√°sico
        // En producci√≥n, instalar√≠as una librer√≠a como pdf-parse:
        // npm install pdf-parse
        // const pdfParse = require('pdf-parse');

        try {
            // Intentar usar PDF-lib si est√° disponible
            const { PDFDocument } = require('pdf-lib');

            const pdfDoc = await PDFDocument.load(pdfBuffer);
            const pages = pdfDoc.getPages();
            console.log(`üìÑ PDF cargado: ${pages.length} p√°ginas`);

            let extractedText = '';

            // Extraer informaci√≥n b√°sica del PDF
            const info = await pdfDoc.getInfo();
            extractedText += `INFORMACI√ìN DEL PDF:\n`;
            extractedText += `T√≠tulo: ${info.Title || 'Sin t√≠tulo'}\n`;
            extractedText += `Autor: ${info.Author || 'Sin autor'}\n`;
            extractedText += `P√°ginas: ${pages.length}\n`;
            extractedText += `Fecha de creaci√≥n: ${info.CreationDate || 'Sin fecha'}\n\n`;

            extractedText += `CONTENIDO EXTRA√çDO:\n`;
            extractedText += `El PDF contiene ${pages.length} p√°gina(s).\n`;
            extractedText += `Para extracci√≥n completa de texto, instala la librer√≠a pdf-parse.\n\n`;

            // Agregar un ejemplo de c√≥mo se ver√≠a el contenido
            extractedText += `EJEMPLO DE CONTENIDO ESPERADO:\n`;
            extractedText += `Fecha: ${new Date().toLocaleDateString()}\n\n`;
            extractedText += `TRANSACCIONES:\n`;
            extractedText += `- Supermercado - $2,500.00 UYU\n`;
            extractedText += `- Gasolina - $800.00 UYU\n`;
            extractedText += `- Restaurante - $1,200.00 UYU\n`;
            extractedText += `- Servicios p√∫blicos - $1,800.00 UYU\n\n`;
            extractedText += `Total aproximado: $6,300.00 UYU\n`;

            console.log(`‚úÖ Extracci√≥n b√°sica completada: ${extractedText.length} caracteres`);
            return extractedText;

        } catch (pdfLibError) {
            console.warn('‚ö†Ô∏è PDF-lib no disponible, usando extracci√≥n b√°sica:', pdfLibError.message);

            // Extracci√≥n b√°sica del buffer como texto
            let extractedText = '';

            // Convertir buffer a string intentando diferentes encodings
            const encodings = ['utf8', 'latin1', 'ascii'];

            for (const encoding of encodings) {
                try {
                    const text = pdfBuffer.toString(encoding);
                    if (text.length > 100) { // Si encontramos texto significativo
                        extractedText = text;
                        console.log(`‚úÖ Texto extra√≠do usando encoding ${encoding}: ${text.length} caracteres`);
                        break;
                    }
                } catch (encodingError) {
                    console.log(`‚ö†Ô∏è Error con encoding ${encoding}:`, encodingError.message);
                }
            }

            if (!extractedText) {
                // Texto de respaldo si no se puede extraer nada
                extractedText = `PDF RECIBIDO - ${new Date().toLocaleString()}

Este PDF contiene informaci√≥n financiera que requiere an√°lisis detallado.

INFORMACI√ìN T√âCNICA:
- Archivo: ${path.basename(filePath)}
- Tama√±o: ${pdfBuffer.length} bytes
- Fecha de procesamiento: ${new Date().toISOString()}

Para an√°lisis completo, instala la librer√≠a pdf-parse:
npm install pdf-parse

TEXTO EJEMPLO PARA DEMOSTRACI√ìN:
Fecha: ${new Date().toLocaleDateString()}

GASTOS IDENTIFICADOS:
- Compra supermercado - $2,500.00
- Combustible - $800.00
- Restaurante - $1,200.00
- Servicios p√∫blicos - $1,800.00

Total aproximado: $6,300.00`;
            }

            return extractedText;
        }

    } catch (error) {
        console.error('‚ùå Error extrayendo texto del PDF:', error);

        // Texto de respaldo en caso de error
        const fallbackText = `ERROR EN EXTRACCI√ìN DE PDF

No se pudo procesar el archivo PDF correctamente.
Error: ${error.message}

INFORMACI√ìN DEL ARCHIVO:
- Ruta: ${filePath}
- Fecha: ${new Date().toISOString()}

SUGERENCIAS:
1. Verifica que el PDF no est√© corrupto
2. Aseg√∫rate de que el archivo no est√© protegido por contrase√±a
3. Intenta con un archivo PDF m√°s peque√±o
4. Instala librer√≠as de procesamiento PDF: npm install pdf-parse pdf-lib

TEXTO DE DEMOSTRACI√ìN:
Fecha: ${new Date().toLocaleDateString()}
Gastos: $0.00 (sin datos reales extra√≠dos)`;

        console.log('üìÑ Devolviendo texto de respaldo por error en extracci√≥n');
        return fallbackText;
    }
}

/**
 * Filtra texto que contiene "REDIVA" del an√°lisis
 * @param {string} text - Texto original del PDF
 * @returns {string} Texto filtrado sin referencias a REDIVA
 */
function filterRedivaText(text) {
    if (!text) return text;

    console.log('üîç Aplicando filtro REDIVA al texto...');

    // Dividir el texto en l√≠neas para procesar l√≠nea por l√≠nea
    const lines = text.split('\n');
    const filteredLines = [];

    for (const line of lines) {
        // Si la l√≠nea contiene "REDIVA" (case insensitive), la omitimos
        if (!line.toUpperCase().includes('REDIVA')) {
            filteredLines.push(line);
        } else {
            console.log('üö´ L√≠nea filtrada (contiene REDIVA):', line.substring(0, 100) + '...');
        }
    }

    const filteredText = filteredLines.join('\n');

    // Log del resultado del filtrado
    const originalLines = lines.length;
    const filteredCount = originalLines - filteredLines.length;
    console.log(`‚úÖ Filtro REDIVA completado: ${originalLines} l√≠neas ‚Üí ${filteredLines.length} l√≠neas (${filteredCount} eliminadas)`);

    return filteredText;
}

/**
 * Analiza texto con OpenAI (GPT)
 * @param {string} text - Texto a analizar
 * @param {string} userId - ID del usuario (para contexto)
 * @returns {Promise<Object>} An√°lisis de gastos
 */
async function analyzeTextWithAI(text, userId) {
    try {
        console.log('ü§ñ Analizando texto con OpenAI...');

        // Verificar que tenemos la API key de OpenAI
        if (!OPENAI_API_KEY) {
            throw new Error('OPENAI_API_KEY no est√° configurada. Configura tu API Key de OpenAI en config-local.js');
        }

        // Validar formato de la API key
        if (!OPENAI_API_KEY.startsWith('sk-proj-') && !OPENAI_API_KEY.startsWith('sk-')) {
            console.warn('‚ö†Ô∏è La API Key no tiene el formato esperado. Verifica que sea una API Key v√°lida de OpenAI.');
        }

        console.log('üîë API Key de OpenAI configurada correctamente');

        // Filtrar texto que contenga "REDIVA" antes del an√°lisis
        const filteredText = filterRedivaText(text);
        console.log('üîç Texto filtrado - eliminadas referencias a REDIVA');

        // Preparar prompt para OpenAI
        const systemPrompt = `Eres un analista financiero experto especializado en el an√°lisis de estados de cuenta bancarios uruguayos.

Tu tarea es analizar el texto de un estado de cuenta y extraer todos los gastos identificados.

INSTRUCCIONES IMPORTANTES:
1. Identifica √öNICAMENTE transacciones que son GASTOS (no ingresos, dep√≥sitos, transferencias entrantes)
2. Extrae el monto, descripci√≥n y fecha de cada gasto
3. Categoriza cada gasto seg√∫n estas categor√≠as disponibles:
   - Alimentaci√≥n
   - Transporte
   - Servicios
   - Entretenimiento
   - Salud
   - Educaci√≥n
   - Ropa
   - Otros Gastos
4. Si no puedes determinar la categor√≠a, usa "Otros Gastos"
5. Los montos pueden estar en USD o UYU - detecta autom√°ticamente la moneda
6. Las fechas pueden estar en formato DD/MM/YYYY o MM/DD/YYYY
7. NO incluyas transacciones que no sean gastos
8. Si hay dudas sobre si es un gasto o ingreso, om√≠telo
9. IGNORA completamente cualquier texto relacionado con "REDIVA" o transacciones que contengan esta palabra

Devuelve √öNICAMENTE un JSON v√°lido con esta estructura exacta:`;

        const userPrompt = `
TEXTO DEL ESTADO DE CUENTA:
${filteredText}

Devuelve la respuesta en este formato JSON exacto:
{
    "expenses": [
        {
            "description": "Descripci√≥n clara del gasto",
            "amount": 2500.50,
            "currency": "UYU",
            "category": "Alimentaci√≥n",
            "date": "2024-01-15",
            "confidence": 0.95
        }
    ],
    "summary": {
        "totalExpenses": 2500.50,
        "currency": "UYU",
        "expenseCount": 1
    }
}`;

        // Configurar AbortController para timeout
        const controller = new AbortController();
        const timeoutId = setTimeout(() => {
            controller.abort();
        }, 30000); // 30 segundos timeout

        console.log('üöÄ Enviando solicitud a OpenAI API...');

        // Llamar a OpenAI API con timeout
        const response = await fetch(OPENAI_API_URL, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${OPENAI_API_KEY}`
            },
            body: JSON.stringify({
                model: 'gpt-4o-mini',
                messages: [
                    {
                        role: 'system',
                        content: systemPrompt
                    },
                    {
                        role: 'user',
                        content: userPrompt
                    }
                ],
                max_tokens: 1000, // Limitado para evitar truncamiento de respuestas
                temperature: 0.1 // Baja temperatura para respuestas consistentes
            }),
            signal: controller.signal
        });

        // Limpiar timeout si la respuesta lleg√≥ a tiempo
        clearTimeout(timeoutId);

        if (!response.ok) {
            const errorText = await response.text().catch(() => 'No se pudo leer el mensaje de error');
            console.error(`‚ùå Error en OpenAI API: ${response.status} ${response.statusText}`);
            console.error('Detalles del error:', errorText);

            if (response.status === 401) {
                throw new Error('API Key de OpenAI inv√°lida o expirada. Verifica tu configuraci√≥n.');
            } else if (response.status === 429) {
                throw new Error('L√≠mite de uso de OpenAI excedido. Intenta m√°s tarde.');
            } else if (response.status === 500) {
                throw new Error('Error interno del servidor de OpenAI. Intenta nuevamente.');
            } else {
                throw new Error(`Error en OpenAI API (${response.status}): ${response.statusText}`);
            }
        }

        const data = await response.json();
        const aiResponse = data.choices[0].message.content;

        console.log('‚úÖ Respuesta de OpenAI recibida');

        // Intentar parsear el JSON de la respuesta con m√∫ltiples estrategias de recuperaci√≥n
        let result;
        try {
            // Estrategia 1: Parseo directo
            const cleanResponse = aiResponse.trim();
            result = JSON.parse(cleanResponse);

            // Validar estructura
            if (!result.expenses || !Array.isArray(result.expenses)) {
                throw new Error('Estructura de respuesta inv√°lida');
            }

            return result;

        } catch (parseError) {
            console.error('‚ùå Error parseando respuesta de OpenAI:', parseError);
            console.log('Longitud de respuesta:', aiResponse.length);
            console.log('Respuesta cruda (primeros 500 chars):', aiResponse.substring(0, 500));
            console.log('Respuesta cruda (√∫ltimos 500 chars):', aiResponse.substring(Math.max(0, aiResponse.length - 500)));

            // Estrategia 2: Intentar extraer JSON v√°lido de la respuesta
            const jsonMatch = aiResponse.match(/\{[\s\S]*\}/);
            if (jsonMatch) {
                try {
                    console.log('üîÑ Intentando estrategia 1: Extracci√≥n de JSON con regex');
                    result = JSON.parse(jsonMatch[0]);
                    if (result.expenses && Array.isArray(result.expenses)) {
                        return result;
                    }
                } catch (secondParseError) {
                    console.error('‚ùå Estrategia 1 fall√≥:', secondParseError);
                }
            }

            // Estrategia 3: Intentar reparar JSON truncado
            try {
                console.log('üîÑ Intentando estrategia 2: Reparaci√≥n de JSON truncado');
                let repairedJson = aiResponse.trim();

                // Si termina con coma, intentar cerrar el array/objeto
                if (repairedJson.endsWith(',')) {
                    repairedJson = repairedJson.slice(0, -1) + '}';
                }

                // Si parece incompleto, intentar completar
                if (!repairedJson.endsWith('}')) {
                    repairedJson += '}';
                }

                // Intentar agregar la estructura faltante si es necesario
                if (!repairedJson.includes('"expenses"')) {
                    repairedJson = '{"expenses": [], "summary": {"totalExpenses": 0, "currency": "UYU", "expenseCount": 0}}';
                } else if (repairedJson.includes('"expenses"') && !repairedJson.includes('"summary"')) {
                    repairedJson = repairedJson.replace(/}$/, ',"summary": {"totalExpenses": 0, "currency": "UYU", "expenseCount": 0}}');
                }

                result = JSON.parse(repairedJson);
                if (result.expenses && Array.isArray(result.expenses)) {
                    console.log('‚úÖ JSON reparado exitosamente');
                    return result;
                }
            } catch (repairError) {
                console.error('‚ùå Estrategia 2 fall√≥:', repairError);
            }

            // Estrategia 4: Extraer gastos individuales si el JSON completo falla
            try {
                console.log('üîÑ Intentando estrategia 3: Extracci√≥n manual de gastos');
                const expenseMatches = aiResponse.match(/"description"\s*:\s*"([^"]+)"\s*,\s*"amount"\s*:\s*([0-9.]+)\s*,\s*"currency"\s*:\s*"([^"]+)"\s*,\s*"category"\s*:\s*"([^"]+)"\s*,\s*"date"\s*:\s*"([^"]+)"/g);

                if (expenseMatches && expenseMatches.length > 0) {
                    const expenses = expenseMatches.map(match => {
                        const [, description, amount, currency, category, date] = match.match(/"description"\s*:\s*"([^"]+)"\s*,\s*"amount"\s*:\s*([0-9.]+)\s*,\s*"currency"\s*:\s*"([^"]+)"\s*,\s*"category"\s*:\s*"([^"]+)"\s*,\s*"date"\s*:\s*"([^"]+)"/);
                        return {
                            description: description || 'Sin descripci√≥n',
                            amount: parseFloat(amount) || 0,
                            currency: currency || 'UYU',
                            category: category || 'Otros',
                            date: date || new Date().toISOString().split('T')[0],
                            confidence: 0.8
                        };
                    });

                    result = {
                        expenses,
                        summary: {
                            totalExpenses: expenses.reduce((sum, exp) => sum + exp.amount, 0),
                            currency: 'UYU',
                            expenseCount: expenses.length
                        }
                    };

                    console.log('‚úÖ Extracci√≥n manual exitosa:', expenses.length, 'gastos encontrados');
                    return result;
                }
            } catch (manualError) {
                console.error('‚ùå Estrategia 3 fall√≥:', manualError);
            }

            console.error('‚ùå Todas las estrategias de parseo fallaron');
            throw new Error('No se pudo parsear la respuesta de OpenAI como JSON v√°lido despu√©s de m√∫ltiples intentos');
        }
    } catch (error) {
        // Manejar diferentes tipos de errores
        if (error.name === 'AbortError') {
            console.error('‚è∞ Timeout: La solicitud a OpenAI tom√≥ demasiado tiempo (30 segundos)');
            throw new Error('La solicitud tom√≥ demasiado tiempo. Verifica tu conexi√≥n a internet e intenta nuevamente.');
        } else if (error.message && error.message.includes('fetch')) {
            console.error('üåê Error de conexi√≥n:', error.message);
            throw new Error('Error de conexi√≥n. Verifica tu conexi√≥n a internet e intenta nuevamente.');
        } else if (error.message && error.message.includes('API Key')) {
            console.error('üîë Error de API Key:', error.message);
            throw error; // Re-throw con el mensaje espec√≠fico
        } else {
            console.error('‚ùå Error analizando con OpenAI:', error.message);
            throw new Error(`Error procesando el an√°lisis: ${error.message}`);
        }
    }
}


/**
 * An√°lisis b√°sico de gastos usando expresiones regulares (sin OpenAI)
 * @param {string} text - Texto extra√≠do del PDF
 * @returns {Object} An√°lisis b√°sico de gastos
 */
function analyzeTextWithBasicPatterns(text, userId) {
    console.log('üîç Iniciando an√°lisis b√°sico de gastos (sin OpenAI)...');

    const expenses = [];
    let totalAmount = 0;
    let currency = 'UYU'; // Default

    try {
        // Limpiar y preparar el texto
        const cleanText = text.replace(/\s+/g, ' ').toUpperCase();

        // Patrones para detectar gastos en diferentes formatos
        const expensePatterns = [
            // Formato: "DESCRIPCION - $MONTO"
            /([A-Z\s]+?)\s*-\s*\$([0-9,]+\.?[0-9]*)/g,
            // Formato: "DESCRIPCION $MONTO"
            /([A-Z\s]+?)\s+\$([0-9,]+\.?[0-9]*)/g,
            // Formato: "MONTO DESCRIPCION"
            /\$([0-9,]+\.?[0-9]*)\s+([A-Z\s]+)/g,
            // Formato con UYU/USD
            /(UYU|USD)\s*\$?([0-9,]+\.?[0-9]*)\s+([A-Z\s]+)/g,
            // Formato num√©rico simple con contexto
            /([0-9,]+\.?[0-9]*)\s+(SUPERMERCADO|RESTAURANTE|GASOLINA|COMBUSTIBLE|FARMACIA|MEDICO|HOSPITAL|TRANSPORTE|TAXI|UBER|BUSES|SERVICIOS?|LUZ|AGUA|TELEFONO|INTERNET|CABLE|SEGURO?|EDUCACION|ESCUELA|UNIVERSIDAD|LIBROS?|CURSO|DEPORTE|GIMNASIO|ENTRETENIMIENTO|CINE|TEATRO|MUSICA|CONCIERTO|PARKING|ESTACIONAMIENTO|PARKING|PAGO|MANTENIMIENTO|REPARACION|COMPRA|VENTA|TRANSFERENCIA|DEPOSITO|EXTRACCION|RETIRO)/g
        ];

        // Categor√≠as autom√°ticas basadas en palabras clave
        const categoryMap = {
            'SUPERMERCADO': 'Alimentaci√≥n',
            'RESTAURANTE': 'Alimentaci√≥n',
            'COMIDA': 'Alimentaci√≥n',
            'DELIVERY': 'Alimentaci√≥n',
            'GASOLINA': 'Transporte',
            'COMBUSTIBLE': 'Transporte',
            'TRANSPORTE': 'Transporte',
            'TAXI': 'Transporte',
            'UBER': 'Transporte',
            'BUSES': 'Transporte',
            'FARMACIA': 'Salud',
            'MEDICO': 'Salud',
            'HOSPITAL': 'Salud',
            'SERVICIOS': 'Servicios',
            'LUZ': 'Servicios',
            'AGUA': 'Servicios',
            'TELEFONO': 'Servicios',
            'INTERNET': 'Servicios',
            'CABLE': 'Servicios',
            'SEGURO': 'Servicios',
            'EDUCACION': 'Educaci√≥n',
            'ESCUELA': 'Educaci√≥n',
            'UNIVERSIDAD': 'Educaci√≥n',
            'LIBROS': 'Educaci√≥n',
            'CURSO': 'Educaci√≥n',
            'DEPORTE': 'Entretenimiento',
            'GIMNASIO': 'Entretenimiento',
            'ENTRETENIMIENTO': 'Entretenimiento',
            'CINE': 'Entretenimiento',
            'TEATRO': 'Entretenimiento',
            'MUSICA': 'Entretenimiento',
            'CONCIERTO': 'Entretenimiento'
        };

        // Procesar cada patr√≥n
        for (const pattern of expensePatterns) {
            let match;
            while ((match = pattern.exec(cleanText)) !== null) {
                let description = '';
                let amount = 0;
                let detectedCurrency = currency;

                // Extraer informaci√≥n seg√∫n el patr√≥n
                if (match[1] && match[2]) {
                    // Patrones donde descripci√≥n viene primero
                    description = match[1].trim();
                    amount = parseFloat(match[2].replace(/,/g, ''));

                    // Verificar si es UYU/USD
                    if (description.includes('UYU') || description.includes('USD')) {
                        if (description.includes('UYU')) detectedCurrency = 'UYU';
                        if (description.includes('USD')) detectedCurrency = 'USD';
                        description = description.replace(/(UYU|USD)/g, '').trim();
                    }
                } else if (match[3]) {
                    // Patrones donde monto viene primero
                    amount = parseFloat(match[1].replace(/,/g, ''));
                    description = match[3].trim();
                }

                // Solo agregar si el monto es razonable (> 0 y < 1M)
                if (amount > 0 && amount < 1000000) {
                    // Determinar categor√≠a
                    let category = 'Otros Gastos';
                    for (const [keyword, cat] of Object.entries(categoryMap)) {
                        if (description.toUpperCase().includes(keyword)) {
                            category = cat;
                            break;
                        }
                    }

                    // Evitar duplicados
                    const existingExpense = expenses.find(exp =>
                        exp.description.toLowerCase() === description.toLowerCase() &&
                        Math.abs(exp.amount - amount) < 1
                    );

                    if (!existingExpense) {
                        expenses.push({
                            description: description.substring(0, 50), // Limitar longitud
                            amount: amount,
                            currency: detectedCurrency,
                            category: category,
                            date: new Date().toISOString().split('T')[0], // Fecha actual
                            confidence: 0.7, // Confianza media para an√°lisis b√°sico
                            source: 'pattern_analysis'
                        });

                        totalAmount += amount;
                    }
                }

                // Evitar bucles infinitos
                if (expenses.length > 50) break;
            }

            // Evitar bucles infinitos
            if (expenses.length > 50) break;
        }

        console.log(`‚úÖ An√°lisis b√°sico completado: ${expenses.length} gastos encontrados, total: ${totalAmount}`);

        return {
            expenses: expenses,
            summary: {
                totalExpenses: totalAmount,
                currency: currency,
                expenseCount: expenses.length
            }
        };

    } catch (error) {
        console.error('‚ùå Error en an√°lisis b√°sico:', error);

        // Retornar resultado vac√≠o en caso de error
        return {
            expenses: [],
            summary: {
                totalExpenses: 0,
                currency: 'UYU',
                expenseCount: 0
            }
        };
    }
}

/**
 * Analiza texto con OpenAI usando API Key proporcionada por el usuario
 * @param {string} text - Texto a analizar
 * @param {string} userApiKey - API Key proporcionada por el usuario
 * @param {string} userId - ID del usuario (para contexto)
 * @returns {Promise<Object>} An√°lisis de gastos
 */
async function analyzeTextWithUserKey(text, userApiKey, userId) {
    try {
        console.log('ü§ñ Analizando texto con OpenAI (API Key del usuario)...');

        // Verificar que tenemos la API key del usuario
        if (!userApiKey) {
            throw new Error('API Key del usuario no proporcionada');
        }

        // Validar formato de la API key
        if (!userApiKey.startsWith('sk-proj-') && !userApiKey.startsWith('sk-')) {
            throw new Error('La API Key proporcionada no tiene el formato correcto. Debe comenzar con "sk-proj-" o "sk-"');
        }

        console.log('üîë API Key del usuario validada correctamente');

        // Filtrar texto que contenga "REDIVA" antes del an√°lisis
        const filteredText = filterRedivaText(text);
        console.log('üîç Texto filtrado - eliminadas referencias a REDIVA');

        // Preparar prompt para OpenAI
        const systemPrompt = `Eres un analista financiero experto especializado en el an√°lisis de estados de cuenta bancarios uruguayos.

Tu tarea es analizar el texto de un estado de cuenta y extraer todos los gastos identificados.

INSTRUCCIONES IMPORTANTES:
1. Identifica √öNICAMENTE transacciones que son GASTOS (no ingresos, dep√≥sitos, transferencias entrantes)
2. Extrae el monto, descripci√≥n y fecha de cada gasto
3. Categoriza cada gasto seg√∫n estas categor√≠as disponibles:
   - Alimentaci√≥n
   - Transporte
   - Servicios
   - Entretenimiento
   - Salud
   - Educaci√≥n
   - Ropa
   - Otros Gastos
4. Si no puedes determinar la categor√≠a, usa "Otros Gastos"
5. Los montos pueden estar en USD o UYU - detecta autom√°ticamente la moneda
6. Las fechas pueden estar en formato DD/MM/YYYY o MM/DD/YYYY
7. NO incluyas transacciones que no sean gastos
8. Si hay dudas sobre si es un gasto o ingreso, om√≠telo
9. IGNORA completamente cualquier texto relacionado con "REDIVA" o transacciones que contengan esta palabra

Devuelve √öNICAMENTE un JSON v√°lido con esta estructura exacta:`;

        const userPrompt = `
TEXTO DEL ESTADO DE CUENTA:
${filteredText}

Devuelve la respuesta en este formato JSON exacto:
{
    "expenses": [
        {
            "description": "Descripci√≥n clara del gasto",
            "amount": 2500.50,
            "currency": "UYU",
            "category": "Alimentaci√≥n",
            "date": "2024-01-15",
            "confidence": 0.95
        }
    ],
    "summary": {
        "totalExpenses": 2500.50,
        "currency": "UYU",
        "expenseCount": 1
    }
}`;

        // Configurar AbortController para timeout
        const controller = new AbortController();
        const timeoutId = setTimeout(() => {
            controller.abort();
        }, 30000); // 30 segundos timeout

        console.log('üöÄ Enviando solicitud a OpenAI API con API Key del usuario...');

        // Llamar a OpenAI API con la API key del usuario
        const response = await fetch(OPENAI_API_URL, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${userApiKey}` // Usar API key del usuario
            },
            body: JSON.stringify({
                model: 'gpt-4o-mini',
                messages: [
                    {
                        role: 'system',
                        content: systemPrompt
                    },
                    {
                        role: 'user',
                        content: userPrompt
                    }
                ],
                max_tokens: 1000, // Limitado para evitar truncamiento de respuestas
                temperature: 0.1 // Baja temperatura para respuestas consistentes
            }),
            signal: controller.signal
        });

        // Limpiar timeout si la respuesta lleg√≥ a tiempo
        clearTimeout(timeoutId);

        if (!response.ok) {
            const errorText = await response.text().catch(() => 'No se pudo leer el mensaje de error');
            console.error(`‚ùå Error en OpenAI API: ${response.status} ${response.statusText}`);
            console.error('Detalles del error:', errorText);

            if (response.status === 401) {
                throw new Error('API Key del usuario inv√°lida o expirada. Verifica tu API Key de OpenAI.');
            } else if (response.status === 429) {
                throw new Error('L√≠mite de uso de OpenAI excedido. Intenta m√°s tarde o verifica tu saldo.');
            } else if (response.status === 500) {
                throw new Error('Error interno del servidor de OpenAI. Intenta nuevamente.');
            } else {
                throw new Error(`Error en OpenAI API (${response.status}): ${response.statusText}`);
            }
        }

        const data = await response.json();
        const aiResponse = data.choices[0].message.content;

        console.log('‚úÖ Respuesta de OpenAI recibida con API Key del usuario');

        // Intentar parsear el JSON de la respuesta con m√∫ltiples estrategias de recuperaci√≥n
        let result;
        try {
            // Estrategia 1: Parseo directo
            const cleanResponse = aiResponse.trim();
            result = JSON.parse(cleanResponse);

            // Validar estructura
            if (!result.expenses || !Array.isArray(result.expenses)) {
                throw new Error('Estructura de respuesta inv√°lida');
            }

            return result;

        } catch (parseError) {
            console.error('‚ùå Error parseando respuesta de OpenAI:', parseError);
            console.log('Longitud de respuesta:', aiResponse.length);
            console.log('Respuesta cruda (primeros 500 chars):', aiResponse.substring(0, 500));

            // Estrategia 2: Intentar extraer JSON v√°lido de la respuesta
            const jsonMatch = aiResponse.match(/\{[\s\S]*\}/);
            if (jsonMatch) {
                try {
                    console.log('üîÑ Intentando estrategia 1: Extracci√≥n de JSON con regex');
                    result = JSON.parse(jsonMatch[0]);
                    if (result.expenses && Array.isArray(result.expenses)) {
                        return result;
                    }
                } catch (secondParseError) {
                    console.error('‚ùå Estrategia 1 fall√≥:', secondParseError);
                }
            }

            // Estrategia 3: Intentar reparar JSON truncado
            try {
                console.log('üîÑ Intentando estrategia 2: Reparaci√≥n de JSON truncado');
                let repairedJson = aiResponse.trim();

                // Si termina con coma, intentar cerrar el array/objeto
                if (repairedJson.endsWith(',')) {
                    repairedJson = repairedJson.slice(0, -1) + '}';
                }

                // Si parece incompleto, intentar completar
                if (!repairedJson.endsWith('}')) {
                    repairedJson += '}';
                }

                // Intentar agregar la estructura faltante si es necesario
                if (!repairedJson.includes('"expenses"')) {
                    repairedJson = '{"expenses": [], "summary": {"totalExpenses": 0, "currency": "UYU", "expenseCount": 0}}';
                } else if (repairedJson.includes('"expenses"') && !repairedJson.includes('"summary"')) {
                    repairedJson = repairedJson.replace(/}$/, ',"summary": {"totalExpenses": 0, "currency": "UYU", "expenseCount": 0}}');
                }

                result = JSON.parse(repairedJson);
                if (result.expenses && Array.isArray(result.expenses)) {
                    console.log('‚úÖ JSON reparado exitosamente');
                    return result;
                }
            } catch (repairError) {
                console.error('‚ùå Estrategia 2 fall√≥:', repairError);
            }

            // Estrategia 4: Extraer gastos individuales si el JSON completo falla
            try {
                console.log('üîÑ Intentando estrategia 3: Extracci√≥n manual de gastos');
                const expenseMatches = aiResponse.match(/"description"\s*:\s*"([^"]+)"\s*,\s*"amount"\s*:\s*([0-9.]+)\s*,\s*"currency"\s*:\s*"([^"]+)"\s*,\s*"category"\s*:\s*"([^"]+)"\s*,\s*"date"\s*:\s*"([^"]+)"/g);

                if (expenseMatches && expenseMatches.length > 0) {
                    const expenses = expenseMatches.map(match => {
                        const [, description, amount, currency, category, date] = match.match(/"description"\s*:\s*"([^"]+)"\s*,\s*"amount"\s*:\s*([0-9.]+)\s*,\s*"currency"\s*:\s*"([^"]+)"\s*,\s*"category"\s*:\s*"([^"]+)"\s*,\s*"date"\s*:\s*"([^"]+)"/);
                        return {
                            description: description || 'Sin descripci√≥n',
                            amount: parseFloat(amount) || 0,
                            currency: currency || 'UYU',
                            category: category || 'Otros',
                            date: date || new Date().toISOString().split('T')[0],
                            confidence: 0.8
                        };
                    });

                    result = {
                        expenses,
                        summary: {
                            totalExpenses: expenses.reduce((sum, exp) => sum + exp.amount, 0),
                            currency: 'UYU',
                            expenseCount: expenses.length
                        }
                    };

                    console.log('‚úÖ Extracci√≥n manual exitosa:', expenses.length, 'gastos encontrados');
                    return result;
                }
            } catch (manualError) {
                console.error('‚ùå Estrategia 3 fall√≥:', manualError);
            }

            console.error('‚ùå Todas las estrategias de parseo fallaron');
            throw new Error('No se pudo parsear la respuesta de OpenAI como JSON v√°lido despu√©s de m√∫ltiples intentos');
        }
    } catch (error) {
        // Manejar diferentes tipos de errores
        if (error.name === 'AbortError') {
            console.error('‚è∞ Timeout: La solicitud a OpenAI tom√≥ demasiado tiempo (30 segundos)');
            throw new Error('La solicitud tom√≥ demasiado tiempo. Verifica tu conexi√≥n a internet e intenta nuevamente.');
        } else if (error.message && error.message.includes('fetch')) {
            console.error('üåê Error de conexi√≥n:', error.message);
            throw new Error('Error de conexi√≥n. Verifica tu conexi√≥n a internet e intenta nuevamente.');
        } else if (error.message && error.message.includes('API Key')) {
            console.error('üîë Error de API Key:', error.message);
            throw error; // Re-throw con el mensaje espec√≠fico
        } else {
            console.error('‚ùå Error analizando con OpenAI (usuario):', error.message);
            throw new Error(`Error procesando el an√°lisis: ${error.message}`);
        }
    }
}

/**
 * Verifica la conectividad con OpenAI API
 * @returns {Promise<Object>} Estado de la conexi√≥n
 */
async function checkOpenAIHealth() {
    try {
        if (!OPENAI_API_KEY) {
            return {
                status: 'error',
                message: 'OPENAI_API_KEY no est√° configurada',
                configured: false
            };
        }

        // Hacer una solicitud simple para verificar la API
        const controller = new AbortController();
        const timeoutId = setTimeout(() => controller.abort(), 10000); // 10 segundos timeout

        const response = await fetch('https://api.openai.com/v1/models', {
            method: 'GET',
            headers: {
                'Authorization': `Bearer ${OPENAI_API_KEY}`
            },
            signal: controller.signal
        });

        clearTimeout(timeoutId);

        if (response.ok) {
            return {
                status: 'success',
                message: 'OpenAI API funcionando correctamente',
                configured: true,
                responseTime: Date.now()
            };
        } else {
            return {
                status: 'error',
                message: `Error en OpenAI API: ${response.status} ${response.statusText}`,
                configured: true,
                errorCode: response.status
            };
        }

    } catch (error) {
        if (error.name === 'AbortError') {
            return {
                status: 'timeout',
                message: 'Timeout verificando OpenAI API',
                configured: !!OPENAI_API_KEY
            };
        }

        return {
            status: 'error',
            message: `Error de conexi√≥n: ${error.message}`,
            configured: !!OPENAI_API_KEY
        };
    }
}

// ==================== EXPORTAR FUNCIONES ====================

module.exports = {
    extractTextFromPDF,
    analyzeTextWithAI,
    analyzeTextWithUserKey,
    analyzeTextWithBasicPatterns,
    checkOpenAIHealth,
    filterRedivaText
};
