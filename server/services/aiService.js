/**
 * ü§ñ SERVICIO UNIFICADO DE IA - FEDE LIFE
 *
 * Servicio completo de IA con acceso a todos los datos del sistema
 * Incluye an√°lisis de PDFs, chat inteligente, diagn√≥sticos financieros y consultas profundas
 * Autor: Senior Backend Developer
 *
 * FUNCIONALIDADES:
 * - An√°lisis de PDFs con IA
 * - Chat financiero inteligente con contexto completo
 * - Diagn√≥sticos financieros avanzados
 * - Consultas profundas con datos hist√≥ricos
 * - Acceso unificado a base de datos completa
 */

const fs = require('fs');
const path = require('path');
const mongoose = require('mongoose');

// Importar modelos de la base de datos
const User = require('../models/User');
const Transaction = require('../models/Transaction');
const Category = require('../models/Category');
const Goal = require('../models/Goal');

// ==================== CONFIGURACI√ìN ====================

// Configuraci√≥n de OpenAI
const OPENAI_API_KEY = process.env.OPENAI_API_KEY;
const OPENAI_API_URL = 'https://api.openai.com/v1/chat/completions';

if (!OPENAI_API_KEY) {
    console.error('‚ùå ERROR: OPENAI_API_KEY no est√° configurada en las variables de entorno');
    console.error('üí° Configura OPENAI_API_KEY en tu archivo .env');
}

// ==================== FUNCIONES DE UTILIDAD ====================

/**
 * Funci√≥n de utilidad para esperar antes de reintentar por rate limit
 * @param {number} retryAfter - Segundos a esperar (del header retry-after)
 * @returns {Promise} Promesa que se resuelve despu√©s del delay
 */
async function waitForRetry(retryAfter) {
    const delay = (retryAfter || 60) * 1000; // Convertir a ms, default 60 segundos
    console.log(`‚è≥ Rate limit excedido. Esperando ${delay / 1000} segundos antes de continuar...`);
    await new Promise(resolve => setTimeout(resolve, delay));
    console.log('‚úÖ Reintentando an√°lisis despu√©s del rate limit...');
}

/**
 * Obtiene las categor√≠as de gastos disponibles desde la base de datos
 * @param {string} userId - ID del usuario (opcional, para categor√≠as personalizadas)
 * @returns {Promise<Array>} Array de categor√≠as de gastos
 */
async function getExpenseCategories(userId = null) {
    try {
        // Categor√≠as por defecto del sistema
        const defaultCategories = [
            { name: 'Alimentaci√≥n', description: 'supermercados, restaurantes, comida, delivery' },
            { name: 'Transporte', description: 'combustible, taxis, transporte p√∫blico, Uber, mec√°nico' },
            { name: 'Servicios', description: 'internet, tel√©fono, luz, agua, gas, cable, seguros' },
            { name: 'Entretenimiento', description: 'cine, juegos, streaming, hobbies, deportes, bares' },
            { name: 'Salud', description: 'm√©dicos, farmacias, seguros m√©dicos, cl√≠nicas, laboratorios' },
            { name: 'Educaci√≥n', description: 'cursos, libros, material educativo, universidades' },
            { name: 'Ropa', description: 'vestimenta, calzado, accesorios, limpieza de ropa' },
            { name: 'Otros Gastos', description: 'SOLO para gastos que NO encajan en ninguna categor√≠a anterior' }
        ];

        // Si se proporciona userId, tambi√©n obtener categor√≠as personalizadas
        if (userId) {
            try {
                const customCategories = await Category.find({
                    userId: userId,
                    type: 'expense',
                    isActive: true
                }).select('name description').lean();

                // Combinar categor√≠as por defecto con personalizadas
                const userCategories = [...defaultCategories];
                
                customCategories.forEach(customCat => {
                    // Solo agregar si no existe ya en las por defecto
                    if (!defaultCategories.some(defCat => defCat.name === customCat.name)) {
                        userCategories.push({
                            name: customCat.name,
                            description: customCat.description || 'Categor√≠a personalizada'
                        });
                    }
                });

                return userCategories;
            } catch (error) {
                console.warn('‚ö†Ô∏è Error obteniendo categor√≠as personalizadas, usando solo las por defecto:', error.message);
                return defaultCategories;
            }
        }

        return defaultCategories;
    } catch (error) {
        console.error('‚ùå Error obteniendo categor√≠as de gastos:', error);
        // Fallback a categor√≠as hardcoded
        return [
            { name: 'Alimentaci√≥n', description: 'supermercados, restaurantes, comida' },
            { name: 'Transporte', description: 'combustible, taxis, transporte p√∫blico' },
            { name: 'Servicios', description: 'internet, tel√©fono, luz, agua, gas' },
            { name: 'Entretenimiento', description: 'cine, juegos, streaming' },
            { name: 'Salud', description: 'm√©dicos, farmacias, seguros m√©dicos' },
            { name: 'Educaci√≥n', description: 'cursos, libros, material educativo' },
            { name: 'Ropa', description: 'vestimenta, calzado' },
            { name: 'Otros Gastos', description: 'gastos que no encajan en otras categor√≠as' }
        ];
    }
}

/**
 * Valida y corrige las categor√≠as en el resultado del an√°lisis de IA
 * @param {Object} aiResult - Resultado del an√°lisis de IA
 * @param {Array} validCategories - Array de categor√≠as v√°lidas
 * @returns {Object} Resultado corregido con categor√≠as v√°lidas
 */
function validateAndCorrectCategories(aiResult, validCategories) {
    try {
        if (!aiResult || !aiResult.expenses || !Array.isArray(aiResult.expenses)) {
            console.warn('‚ö†Ô∏è Resultado de IA inv√°lido, no se puede validar categor√≠as');
            return aiResult;
        }

        const validCategoryNames = validCategories.map(cat => cat.name);
        let correctedCount = 0;

        // Validar y corregir cada gasto
        aiResult.expenses.forEach(expense => {
            if (!expense.category) {
                expense.category = 'Otros Gastos';
                correctedCount++;
                return;
            }

            // Verificar si la categor√≠a es v√°lida
            const isValidCategory = validCategoryNames.includes(expense.category);
            
            if (!isValidCategory) {
                console.warn(`‚ö†Ô∏è Categor√≠a inv√°lida encontrada: "${expense.category}" para gasto: ${expense.description}`);
                
                // Intentar encontrar categor√≠a similar
                const lowerCategory = expense.category.toLowerCase();
                let correctedCategory = 'Otros Gastos';
                
                // Mapear categor√≠as comunes mal escritas
                const categoryMappings = {
                    'alimentacion': 'Alimentaci√≥n',
                    'comida': 'Alimentaci√≥n',
                    'supermercado': 'Alimentaci√≥n',
                    'restaurant': 'Alimentaci√≥n',
                    'restaurante': 'Alimentaci√≥n',
                    'transporte': 'Transporte',
                    'taxi': 'Transporte',
                    'combustible': 'Transporte',
                    'servicios': 'Servicios',
                    'internet': 'Servicios',
                    'telefono': 'Servicios',
                    'luz': 'Servicios',
                    'agua': 'Servicios',
                    'entretenimiento': 'Entretenimiento',
                    'cine': 'Entretenimiento',
                    'streaming': 'Entretenimiento',
                    'salud': 'Salud',
                    'medico': 'Salud',
                    'farmacia': 'Salud',
                    'educacion': 'Educaci√≥n',
                    'educaci√≥n': 'Educaci√≥n',
                    'curso': 'Educaci√≥n',
                    'libro': 'Educaci√≥n',
                    'ropa': 'Ropa',
                    'vestimenta': 'Ropa',
                    'calzado': 'Ropa',
                    'otros': 'Otros Gastos',
                    'otros gastos': 'Otros Gastos'
                };

                // Buscar mapeo directo
                if (categoryMappings[lowerCategory]) {
                    correctedCategory = categoryMappings[lowerCategory];
                } else {
                    // Buscar coincidencia parcial
                    for (const [key, value] of Object.entries(categoryMappings)) {
                        if (lowerCategory.includes(key) || key.includes(lowerCategory)) {
                            correctedCategory = value;
                            break;
                        }
                    }
                }

                console.log(`üîß Corrigiendo categor√≠a "${expense.category}" ‚Üí "${correctedCategory}"`);
                expense.category = correctedCategory;
                correctedCount++;
            }
        });

        if (correctedCount > 0) {
            console.log(`‚úÖ Se corrigieron ${correctedCount} categor√≠as inv√°lidas`);
        }

        return aiResult;

    } catch (error) {
        console.error('‚ùå Error validando categor√≠as:', error);
        return aiResult; // Devolver resultado original si hay error
    }
}

// ==================== FUNCIONES PRINCIPALES ====================



/**
 * Analiza texto con OpenAI (GPT)
 * @param {string} text - Texto a analizar
 * @param {string} userId - ID del usuario (para contexto)
 * @returns {Promise<Object>} An√°lisis de gastos
 */
async function analyzeTextWithAI(text, userId) {
    // Guardar referencia al texto original para usar en estrategias de respaldo
    const originalText = text;

    try {
        console.log('ü§ñ Analizando texto con OpenAI...');

        // Verificar que tenemos la API key de OpenAI
        if (!OPENAI_API_KEY) {
            throw new Error('OPENAI_API_KEY no est√° configurada. Configura tu API Key de OpenAI en config-local.js');
        }

        // Validar formato de la API key
        if (!OPENAI_API_KEY.startsWith('sk-proj-') && !OPENAI_API_KEY.startsWith('sk-')) {
            console.warn('‚ö†Ô∏è La API Key no tiene el formato esperado. Verifica que sea una API Key v√°lida de OpenAI.');
        }

        console.log('üîë API Key de OpenAI configurada correctamente');

        // Obtener categor√≠as din√°micamente desde la base de datos
        console.log('üìÇ Obteniendo categor√≠as desde la base de datos...');
        const categories = await getExpenseCategories(userId);
        
        // Construir la lista de categor√≠as para el prompt
        const categoryList = categories.map(cat => `   - ${cat.name} (${cat.description})`).join('\n');
        
        console.log(`üìÇ Se encontraron ${categories.length} categor√≠as disponibles para categorizaci√≥n`);

        // Preparar prompt para OpenAI
        const systemPrompt = `Eres un analista financiero experto especializado en el an√°lisis de estados de cuenta bancarios uruguayos.

Tu tarea es analizar el texto de un estado de cuenta y extraer TODAS las transacciones de gastos identificadas.

INSTRUCCIONES CR√çTICAS - LEE CON ATENCI√ìN:
1. Identifica √öNICAMENTE transacciones que son GASTOS (no ingresos, dep√≥sitos, transferencias entrantes, pagos, saldos)
2. Extrae TODAS las transacciones de gastos sin excepci√≥n - no resumas ni selecciones solo "principales"
3. Si hay 50 gastos, incluye los 50. Si hay 100, incluye los 100.
4. Para cada gasto extrae: descripci√≥n, monto, fecha
5. Categoriza cada gasto seg√∫n EXACTAMENTE estas categor√≠as de la base de datos (USA LOS NOMBRES EXACTOS):
${categoryList}

REGLA CR√çTICA DE CATEGORIZACI√ìN: 
- NUNCA uses "Otros" como categor√≠a, usa "Otros Gastos"
- NUNCA inventes categor√≠as nuevas, usa SOLO las categor√≠as listadas arriba
- Si un gasto puede estar en dos categor√≠as, elige la m√°s espec√≠fica
- EVITA poner gastos en "Otros Gastos" a menos que realmente no encajen en ninguna otra

6. DETECCI√ìN AUTOM√ÅTICA DE MONEDA (regla estricta):
   - Si el monto es MENOR a $150, autom√°ticamente es USD (d√≥lares)
   - Si el monto es MAYOR o IGUAL a $150, autom√°ticamente es UYU (pesos uruguayos)
   - NO cambies esta regla por ning√∫n motivo
7. Las fechas pueden estar en formato DD/MM/YYYY, DD-MM-YY, DD-MM-YYYY o MM/DD/YYYY
8. NO incluyas transacciones que no sean gastos reales
9. IGNORA completamente cualquier texto relacionado con "REDIVA", pagos, dep√≥sitos, transferencias entrantes
10. Para montos con decimales, usa el punto como separador decimal

IMPORTANTE: Lista TODAS las transacciones encontradas. Si el texto contiene 30 gastos, tu JSON debe tener 30 elementos en el array "expenses".

Devuelve √öNICAMENTE un JSON v√°lido con esta estructura exacta:`;

        const userPrompt = `
TEXTO DEL ESTADO DE CUENTA:
${text}

Devuelve la respuesta en este formato JSON exacto:
{
    "expenses": [
        {
            "description": "Descripci√≥n clara del gasto",
            "amount": 2500.50,
            "currency": "UYU",
            "category": "Alimentaci√≥n",
            "date": "2024-01-15",
            "confidence": 0.95
        }
    ],
    "summary": {
        "totalExpenses": 2500.50,
        "currency": "UYU",
        "expenseCount": 1
    }
}`;

        // Configurar AbortController para timeout
        const controller = new AbortController();
        const timeoutId = setTimeout(() => {
            controller.abort();
        }, 30000); // 30 segundos timeout

        console.log('üöÄ Enviando solicitud a OpenAI API...');

        // Llamar a OpenAI API con timeout
        const response = await fetch(OPENAI_API_URL, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${OPENAI_API_KEY}`
            },
            body: JSON.stringify({
                model: 'gpt-4o-mini',
                messages: [
                    {
                        role: 'system',
                        content: systemPrompt
                    },
                    {
                        role: 'user',
                        content: userPrompt
                    }
                ],
                max_tokens: 8000, // Aumentado para procesar todas las transacciones
                temperature: 0.1 // Baja temperatura para respuestas consistentes
            }),
            signal: controller.signal
        });

        // Limpiar timeout si la respuesta lleg√≥ a tiempo
        clearTimeout(timeoutId);

        if (!response.ok) {
            const errorText = await response.text().catch(() => 'No se pudo leer el mensaje de error');
            console.error(`‚ùå Error en OpenAI API: ${response.status} ${response.statusText}`);
            console.error('Detalles del error:', errorText);

            if (response.status === 401) {
                throw new Error('API Key de OpenAI inv√°lida o expirada. Verifica tu configuraci√≥n.');
            } else if (response.status === 429) {
                // Intentar extraer informaci√≥n de rate limiting de los headers
                const retryAfter = response.headers.get('retry-after');
                const limitRequests = response.headers.get('x-ratelimit-limit-requests');
                const remainingRequests = response.headers.get('x-ratelimit-remaining-requests');
                const limitTokens = response.headers.get('x-ratelimit-limit-tokens');
                const remainingTokens = response.headers.get('x-ratelimit-remaining-tokens');

                let errorMessage = 'L√≠mite de uso de OpenAI excedido. ';

                if (retryAfter) {
                    errorMessage += `Reintenta en ${retryAfter} segundos. `;
                } else {
                    errorMessage += 'Intenta m√°s tarde. ';
                }

                if (remainingRequests && limitRequests) {
                    errorMessage += `Solicitudes restantes: ${remainingRequests}/${limitRequests}. `;
                }

                if (remainingTokens && limitTokens) {
                    errorMessage += `Tokens restantes: ${remainingTokens}/${limitTokens}. `;
                }

                errorMessage += 'Verifica tu plan de OpenAI y l√≠mites de uso.';

                // Agregar sugerencias espec√≠ficas para el usuario
                errorMessage += '\n\nüí° Sugerencias:';
                errorMessage += '\n‚Ä¢ Espera el tiempo indicado antes de reintentar';
                errorMessage += '\n‚Ä¢ Revisa tu plan de OpenAI en https://platform.openai.com/account/billing';
                errorMessage += '\n‚Ä¢ Considera actualizar tu plan para l√≠mites m√°s altos';
                errorMessage += '\n‚Ä¢ Si tienes mucho saldo, verifica que tu API key sea correcta';

                throw new Error(errorMessage);
            } else if (response.status === 500 || response.status === 502 || response.status === 503 || response.status === 504) {
                console.warn(`‚ö†Ô∏è Error de conectividad OpenAI (${response.status}): ${response.statusText}`);
                console.log('üîÑ Activando estrategia de respaldo debido a error de conectividad');

                // En lugar de lanzar error, devolver los datos originales
                if (originalText && typeof originalText === 'string' && originalText.includes(' - ')) {
                    console.log('üìä Usando estrategia de respaldo por error de conectividad');

                    const lines = originalText.split('\n');
                    const originalExpenses = [];

                    for (const line of lines) {
                        if (line && typeof line === 'string' && line.includes(' - $')) {
                            try {
                                const parts = line.split(' - ');
                                if (parts.length >= 2) {
                                    const [date, rest] = parts;
                                    const [description, amountStr] = rest.split(' - $');

                                    if (description && amountStr) {
                                        const amount = parseFloat(amountStr.trim());
                                        if (!isNaN(amount) && amount > 0) {
                                            originalExpenses.push({
                                                description: description.trim(),
                                                amount: amount,
                                                currency: amount < 150 ? 'USD' : 'UYU',
                                                category: 'Otros Gastos',
                                                date: date.trim(),
                                                confidence: 0.6
                                            });
                                        }
                                    }
                                }
                            } catch (e) {
                                console.warn('‚ö†Ô∏è Error procesando l√≠nea original:', line);
                            }
                        }
                    }

                    if (originalExpenses.length > 0) {
                        return {
                            expenses: originalExpenses,
                            summary: {
                                totalExpenses: originalExpenses.reduce((sum, exp) => sum + exp.amount, 0),
                                currency: 'UYU',
                                expenseCount: originalExpenses.length
                            }
                        };
                    }
                }

                throw new Error(`Error de conectividad OpenAI (${response.status}): ${response.statusText}`);
            } else {
                throw new Error(`Error en OpenAI API (${response.status}): ${response.statusText}`);
            }
        }

        const data = await response.json();
        const aiResponse = data.choices[0].message.content;

        console.log('‚úÖ Respuesta de OpenAI recibida');

        // Intentar parsear el JSON de la respuesta con m√∫ltiples estrategias de recuperaci√≥n
        let result;
        try {
            // Estrategia 1: Parseo directo
            const cleanResponse = aiResponse.trim();
            result = JSON.parse(cleanResponse);

            // Validar estructura
            if (!result.expenses || !Array.isArray(result.expenses)) {
                throw new Error('Estructura de respuesta inv√°lida');
            }

            return result;

        } catch (parseError) {
            console.error('‚ùå Error parseando respuesta de OpenAI:', parseError);
            console.log('Longitud de respuesta:', aiResponse.length);
            console.log('Respuesta cruda (primeros 500 chars):', aiResponse.substring(0, 500));
            console.log('Respuesta cruda (√∫ltimos 500 chars):', aiResponse.substring(Math.max(0, aiResponse.length - 500)));

            // Estrategia 2: Intentar extraer JSON v√°lido de la respuesta
            const jsonMatch = aiResponse.match(/\{[\s\S]*\}/);
            if (jsonMatch) {
                try {
                    console.log('üîÑ Intentando estrategia 1: Extracci√≥n de JSON con regex');
                    result = JSON.parse(jsonMatch[0]);
                    if (result.expenses && Array.isArray(result.expenses)) {
                        return result;
                    }
                } catch (secondParseError) {
                    console.error('‚ùå Estrategia 1 fall√≥:', secondParseError);
                }
            }

            // Estrategia 3: Intentar reparar JSON truncado
            try {
                console.log('üîÑ Intentando estrategia 2: Reparaci√≥n de JSON truncado');
                let repairedJson = aiResponse.trim();

                // Si termina con coma, intentar cerrar el array/objeto
                if (repairedJson.endsWith(',')) {
                    repairedJson = repairedJson.slice(0, -1) + '}';
                }

                // Si parece incompleto, intentar completar
                if (!repairedJson.endsWith('}')) {
                    repairedJson += '}';
                }

                // Intentar agregar la estructura faltante si es necesario
                if (!repairedJson.includes('"expenses"')) {
                    repairedJson = '{"expenses": [], "summary": {"totalExpenses": 0, "currency": "UYU", "expenseCount": 0}}';
                } else if (repairedJson.includes('"expenses"') && !repairedJson.includes('"summary"')) {
                    repairedJson = repairedJson.replace(/}$/, ',"summary": {"totalExpenses": 0, "currency": "UYU", "expenseCount": 0}}');
                }

                result = JSON.parse(repairedJson);
                if (result.expenses && Array.isArray(result.expenses)) {
                    console.log('‚úÖ JSON reparado exitosamente');
                    return result;
                }
            } catch (repairError) {
                console.error('‚ùå Estrategia 2 fall√≥:', repairError);
            }

            // Estrategia 4: Extraer gastos individuales si el JSON completo falla
            try {
                console.log('üîÑ Intentando estrategia 3: Extracci√≥n manual de gastos');
                const expenseMatches = aiResponse.match(/"description"\s*:\s*"([^"]+)"\s*,\s*"amount"\s*:\s*([0-9.]+)\s*,\s*"currency"\s*:\s*"([^"]+)"\s*,\s*"category"\s*:\s*"([^"]+)"\s*,\s*"date"\s*:\s*"([^"]+)"/g);

                if (expenseMatches && expenseMatches.length > 0) {
                    const expenses = expenseMatches.map(match => {
                        const [, description, amount, currency, category, date] = match.match(/"description"\s*:\s*"([^"]+)"\s*,\s*"amount"\s*:\s*([0-9.]+)\s*,\s*"currency"\s*:\s*"([^"]+)"\s*,\s*"category"\s*:\s*"([^"]+)"\s*,\s*"date"\s*:\s*"([^"]+)"/);
                        return {
                            description: description || 'Sin descripci√≥n',
                            amount: parseFloat(amount) || 0,
                            currency: currency || 'UYU',
                            category: category || 'Otros',
                            date: date || new Date().toISOString().split('T')[0],
                            confidence: 0.8
                        };
                    });

                    result = {
                        expenses,
                        summary: {
                            totalExpenses: expenses.reduce((sum, exp) => sum + exp.amount, 0),
                            currency: 'UYU',
                            expenseCount: expenses.length
                        }
                    };

                    console.log('‚úÖ Extracci√≥n manual exitosa:', expenses.length, 'gastos encontrados');
                    return result;
                }
            } catch (manualError) {
                console.error('‚ùå Estrategia 3 fall√≥:', manualError);
            }

            // Estrategia 4: √öltima opci√≥n - devolver los datos originales sin procesar por OpenAI
            console.log('üîÑ Intentando estrategia 4: Devoluci√≥n de datos originales');

            // Si no pudimos parsear la respuesta de OpenAI, devolver los gastos originales
            // que se extrajeron del CSV antes de enviarlos a OpenAI
            if (originalText && typeof originalText === 'string' && originalText.includes(' - ')) {
                console.log('üìä Usando estrategia de respaldo: devolver gastos originales del CSV');

                // Extraer gastos del texto original que se envi√≥ a OpenAI
                const lines = originalText.split('\n');
                const originalExpenses = [];

                for (const line of lines) {
                    if (line.includes(' - $')) {
                        try {
                            const parts = line.split(' - ');
                            if (parts.length >= 2) {
                                const [date, rest] = parts;
                                const [description, amountStr] = rest.split(' - $');

                                if (description && amountStr) {
                                    const amount = parseFloat(amountStr.trim());
                                    if (!isNaN(amount) && amount > 0) {
                                        originalExpenses.push({
                                            description: description.trim(),
                                            amount: amount,
                                            currency: amount < 150 ? 'USD' : 'UYU',
                                            category: 'Otros Gastos',
                                            date: date.trim(),
                                            confidence: 0.7
                                        });
                                    }
                                }
                            }
                        } catch (e) {
                            console.warn('‚ö†Ô∏è Error procesando l√≠nea original:', line);
                        }
                    }
                }

                if (originalExpenses.length > 0) {
                    result = {
                        expenses: originalExpenses,
                        summary: {
                            totalExpenses: originalExpenses.reduce((sum, exp) => sum + exp.amount, 0),
                            currency: 'UYU',
                            expenseCount: originalExpenses.length
                        }
                    };
                    console.log('‚úÖ Estrategia de respaldo exitosa:', originalExpenses.length, 'gastos devueltos');
                    return result;
                }
            }

            console.error('‚ùå Todas las estrategias de parseo fallaron');
            throw new Error('No se pudo parsear la respuesta de OpenAI. Se perdieron algunos datos, pero el sistema funcion√≥ parcialmente.');
        }
    } catch (error) {
        // Manejar diferentes tipos de errores
        if (error.name === 'AbortError') {
            console.error('‚è∞ Timeout: La solicitud a OpenAI tom√≥ demasiado tiempo (30 segundos)');
            throw new Error('La solicitud tom√≥ demasiado tiempo. Verifica tu conexi√≥n a internet e intenta nuevamente.');
        } else if (error.message && error.message.includes('fetch')) {
            console.error('üåê Error de conexi√≥n:', error.message);
            throw new Error('Error de conexi√≥n. Verifica tu conexi√≥n a internet e intenta nuevamente.');
        } else if (error.message && error.message.includes('API Key')) {
            console.error('üîë Error de API Key:', error.message);
            throw error; // Re-throw con el mensaje espec√≠fico
        } else {
            console.error('‚ùå Error analizando con OpenAI:', error.message);
            throw new Error(`Error procesando el an√°lisis: ${error.message}`);
        }
    }
}



/**
 * Analiza texto con OpenAI usando API Key proporcionada por el usuario
 * @param {string} text - Texto a analizar
 * @param {string} userApiKey - API Key proporcionada por el usuario
 * @param {string} userId - ID del usuario (para contexto)
 * @returns {Promise<Object>} An√°lisis de gastos
 */
async function analyzeTextWithUserKey(text, userApiKey, userId) {
    // Guardar referencia al texto original para usar en estrategias de respaldo
    const originalText = text;

    try {
        console.log('ü§ñ Analizando texto con OpenAI (API Key del usuario)...');

        // Verificar que tenemos la API key del usuario
        if (!userApiKey) {
            throw new Error('API Key del usuario no proporcionada');
        }

        // Validar formato de la API key
        if (!userApiKey.startsWith('sk-proj-') && !userApiKey.startsWith('sk-')) {
            throw new Error('La API Key proporcionada no tiene el formato correcto. Debe comenzar con "sk-proj-" o "sk-"');
        }

        console.log('üîë API Key del usuario validada correctamente');

        // Nota: El filtro REDIVA fue removido seg√∫n los requerimientos
        console.log('üîç Filtro REDIVA omitido (funci√≥n eliminada)');

        // Obtener categor√≠as din√°micamente desde la base de datos
        console.log('üìÇ Obteniendo categor√≠as para an√°lisis CSV...');
        const categories = await getExpenseCategories(); // Sin userId para CSV p√∫blico
        
        // Construir la lista de categor√≠as para el prompt
        const categoryList = categories.map(cat => `   - ${cat.name} (${cat.description})`).join('\n');
        
        console.log(`üìÇ Se encontraron ${categories.length} categor√≠as disponibles para CSV`);

        // Preparar prompt para OpenAI
        const systemPrompt = `Eres un analista financiero experto especializado en el an√°lisis de estados de cuenta bancarios uruguayos.

Tu tarea es analizar el texto de un estado de cuenta y extraer todos los gastos identificados.

INSTRUCCIONES IMPORTANTES:
1. Identifica √öNICAMENTE transacciones que son GASTOS (no ingresos, dep√≥sitos, transferencias entrantes)
2. Extrae el monto, descripci√≥n y fecha de cada gasto
3. Categoriza cada gasto seg√∫n EXACTAMENTE estas categor√≠as de la base de datos (USA LOS NOMBRES EXACTOS):
${categoryList}

REGLA CR√çTICA DE CATEGORIZACI√ìN: 
- NUNCA uses "Otros" como categor√≠a, usa "Otros Gastos"
- NUNCA inventes categor√≠as nuevas, usa SOLO las categor√≠as listadas arriba
- Si un gasto puede estar en dos categor√≠as, elige la m√°s espec√≠fica
- EVITA poner gastos en "Otros Gastos" a menos que realmente no encajen en ninguna otra
4. Si no puedes determinar la categor√≠a, usa "Otros Gastos"
5. DETECCI√ìN AUTOM√ÅTICA DE MONEDA:
   - Si el monto es MENOR a $150, autom√°ticamente es USD (d√≥lares)
   - Si el monto es MAYOR o IGUAL a $150, autom√°ticamente es UYU (pesos uruguayos)
   - NO cambies esta regla por ning√∫n motivo
6. Las fechas pueden estar en formato DD/MM/YYYY, DD-MM-YY, DD-MM-YYYY o MM/DD/YYYY
7. NO incluyas transacciones que no sean gastos
8. IGNORA completamente cualquier texto relacionado con "REDIVA" o transacciones que contengan esta palabra
9. Para montos con decimales, usa el punto como separador decimal

Devuelve √öNICAMENTE un JSON v√°lido con esta estructura exacta:`;

        const userPrompt = `
TEXTO DEL ESTADO DE CUENTA:
${text}

Devuelve la respuesta en este formato JSON exacto:
{
    "expenses": [
        {
            "description": "Descripci√≥n clara del gasto",
            "amount": 2500.50,
            "currency": "UYU",
            "category": "Alimentaci√≥n",
            "date": "2024-01-15",
            "confidence": 0.95
        }
    ],
    "summary": {
        "totalExpenses": 2500.50,
        "currency": "UYU",
        "expenseCount": 1
    }
}`;

        // Configurar AbortController para timeout
        const controller = new AbortController();
        const timeoutId = setTimeout(() => {
            controller.abort();
        }, 30000); // 30 segundos timeout

        console.log('üöÄ Enviando solicitud a OpenAI API con API Key del usuario...');

        // Llamar a OpenAI API con la API key del usuario
        const response = await fetch(OPENAI_API_URL, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${userApiKey}` // Usar API key del usuario
            },
            body: JSON.stringify({
                model: 'gpt-4o-mini',
                messages: [
                    {
                        role: 'system',
                        content: systemPrompt
                    },
                    {
                        role: 'user',
                        content: userPrompt
                    }
                ],
                max_tokens: 8000, // Aumentado para procesar todas las transacciones
                temperature: 0.1 // Baja temperatura para respuestas consistentes
            }),
            signal: controller.signal
        });

        // Limpiar timeout si la respuesta lleg√≥ a tiempo
        clearTimeout(timeoutId);

        if (!response.ok) {
            const errorText = await response.text().catch(() => 'No se pudo leer el mensaje de error');
            console.error(`‚ùå Error en OpenAI API: ${response.status} ${response.statusText}`);
            console.error('Detalles del error:', errorText);

            if (response.status === 401) {
                throw new Error('API Key del usuario inv√°lida o expirada. Verifica tu API Key de OpenAI.');
            } else if (response.status === 429) {
                // Intentar extraer informaci√≥n de rate limiting de los headers
                const retryAfter = response.headers.get('retry-after');
                const limitRequests = response.headers.get('x-ratelimit-limit-requests');
                const remainingRequests = response.headers.get('x-ratelimit-remaining-requests');
                const limitTokens = response.headers.get('x-ratelimit-limit-tokens');
                const remainingTokens = response.headers.get('x-ratelimit-remaining-tokens');

                let errorMessage = 'L√≠mite de uso de OpenAI excedido. ';

                if (retryAfter) {
                    errorMessage += `Reintenta en ${retryAfter} segundos. `;
                } else {
                    errorMessage += 'Intenta m√°s tarde. ';
                }

                if (remainingRequests && limitRequests) {
                    errorMessage += `Solicitudes restantes: ${remainingRequests}/${limitRequests}. `;
                }

                if (remainingTokens && limitTokens) {
                    errorMessage += `Tokens restantes: ${remainingTokens}/${limitTokens}. `;
                }

                errorMessage += 'Verifica tu plan de OpenAI y l√≠mites de uso.';

                // Agregar sugerencias espec√≠ficas para el usuario
                errorMessage += '\n\nüí° Sugerencias:';
                errorMessage += '\n‚Ä¢ Espera el tiempo indicado antes de reintentar';
                errorMessage += '\n‚Ä¢ Revisa tu plan de OpenAI en https://platform.openai.com/account/billing';
                errorMessage += '\n‚Ä¢ Considera actualizar tu plan para l√≠mites m√°s altos';
                errorMessage += '\n‚Ä¢ Si tienes mucho saldo, verifica que tu API key sea correcta';

                throw new Error(errorMessage);
            } else if (response.status === 500 || response.status === 502 || response.status === 503 || response.status === 504) {
                console.warn(`‚ö†Ô∏è Error de conectividad OpenAI (${response.status}): ${response.statusText}`);
                console.log('üîÑ Activando estrategia de respaldo debido a error de conectividad');

                // En lugar de lanzar error, devolver los datos originales
                if (originalText && typeof originalText === 'string' && originalText.includes(' - ')) {
                    console.log('üìä Usando estrategia de respaldo por error de conectividad');

                    const lines = originalText.split('\n');
                    const originalExpenses = [];

                    for (const line of lines) {
                        if (line && typeof line === 'string' && line.includes(' - $')) {
                            try {
                                const parts = line.split(' - ');
                                if (parts.length >= 2) {
                                    const [date, rest] = parts;
                                    const [description, amountStr] = rest.split(' - $');

                                    if (description && amountStr) {
                                        const amount = parseFloat(amountStr.trim());
                                        if (!isNaN(amount) && amount > 0) {
                                            originalExpenses.push({
                                                description: description.trim(),
                                                amount: amount,
                                                currency: amount < 150 ? 'USD' : 'UYU',
                                                category: 'Otros Gastos',
                                                date: date.trim(),
                                                confidence: 0.6
                                            });
                                        }
                                    }
                                }
                            } catch (e) {
                                console.warn('‚ö†Ô∏è Error procesando l√≠nea original:', line);
                            }
                        }
                    }

                    if (originalExpenses.length > 0) {
                        return {
                            expenses: originalExpenses,
                            summary: {
                                totalExpenses: originalExpenses.reduce((sum, exp) => sum + exp.amount, 0),
                                currency: 'UYU',
                                expenseCount: originalExpenses.length
                            }
                        };
                    }
                }

                throw new Error(`Error de conectividad OpenAI (${response.status}): ${response.statusText}`);
            } else {
                throw new Error(`Error en OpenAI API (${response.status}): ${response.statusText}`);
            }
        }

        const data = await response.json();
        const aiResponse = data.choices[0].message.content;

        console.log('‚úÖ Respuesta de OpenAI recibida con API Key del usuario');

        // Intentar parsear el JSON de la respuesta con m√∫ltiples estrategias de recuperaci√≥n
        let result;
        try {
            // Estrategia 1: Parseo directo
            const cleanResponse = aiResponse.trim();
            result = JSON.parse(cleanResponse);

            // Validar estructura
            if (!result.expenses || !Array.isArray(result.expenses)) {
                throw new Error('Estructura de respuesta inv√°lida');
            }

            return result;

        } catch (parseError) {
            console.error('‚ùå Error parseando respuesta de OpenAI:', parseError);
            console.log('Longitud de respuesta:', aiResponse.length);
            console.log('Respuesta cruda (primeros 500 chars):', aiResponse.substring(0, 500));
            console.log('Respuesta cruda (√∫ltimos 500 chars):', aiResponse.substring(Math.max(0, aiResponse.length - 500)));

            // Estrategia 2: Intentar extraer JSON v√°lido de la respuesta con mejor regex
            const jsonMatches = aiResponse.match(/\{[\s\S]*?\}(?=\s*$|\s*[^}])/g);
            if (jsonMatches && jsonMatches.length > 0) {
                for (let i = 0; i < jsonMatches.length; i++) {
                    try {
                        console.log(`üîÑ Intentando estrategia 1: Extracci√≥n de JSON ${i + 1}/${jsonMatches.length}`);
                        result = JSON.parse(jsonMatches[i]);
                        if (result.expenses && Array.isArray(result.expenses)) {
                            console.log('‚úÖ JSON v√°lido encontrado en estrategia 1');
                            return result;
                        }
                    } catch (secondParseError) {
                        console.error(`‚ùå JSON ${i + 1} inv√°lido:`, secondParseError.message);
                    }
                }
            }

            // Estrategia 3: Mejorar la reparaci√≥n de JSON truncado
            try {
                console.log('üîÑ Intentando estrategia 2: Reparaci√≥n avanzada de JSON');
                let repairedJson = aiResponse.trim();

                // Limpiar caracteres problem√°ticos al final
                repairedJson = repairedJson.replace(/,\s*$/, ''); // Remover coma final
                repairedJson = repairedJson.replace(/\s*}\s*$/, ''); // Remover llave final si existe

                // Intentar encontrar el final v√°lido del JSON
                const lastValidBrace = repairedJson.lastIndexOf('}');
                if (lastValidBrace > 0) {
                    repairedJson = repairedJson.substring(0, lastValidBrace + 1);
                }

                // Intentar completar el JSON
                if (!repairedJson.includes('"summary"')) {
                    repairedJson = repairedJson.replace(/}$/, ',"summary": {"totalExpenses": 0, "currency": "UYU", "expenseCount": 0}}');
                }

                // Si no tiene expenses, crear estructura b√°sica
                if (!repairedJson.includes('"expenses"')) {
                    repairedJson = '{"expenses": [], "summary": {"totalExpenses": 0, "currency": "UYU", "expenseCount": 0}}';
                }

                result = JSON.parse(repairedJson);
                if (result && typeof result === 'object') {
                    // Validar que tenga la estructura esperada
                    if (!result.expenses) result.expenses = [];
                    if (!result.summary) result.summary = { totalExpenses: 0, currency: 'UYU', expenseCount: 0 };

                    // Calcular summary si expenses existe
                    if (result.expenses && Array.isArray(result.expenses)) {
                        const total = result.expenses.reduce((sum, exp) => sum + (exp.amount || 0), 0);
                        result.summary.totalExpenses = total;
                        result.summary.expenseCount = result.expenses.length;
                        console.log('‚úÖ JSON reparado exitosamente con', result.expenses.length, 'gastos');
                        return result;
                    }
                }
            } catch (repairError) {
                console.error('‚ùå Estrategia 2 fall√≥:', repairError.message);
            }

            // Estrategia 4: Intentar extraer datos de expenses directamente
            try {
                console.log('üîÑ Intentando estrategia 3: Extracci√≥n directa de expenses');
                const expensesMatch = aiResponse.match(/"expenses"\s*:\s*\[([\s\S]*?)\]/);
                if (expensesMatch) {
                    const expensesString = expensesMatch[1];
                    console.log('üìä Expenses string encontrado, intentando parsear...');

                    // Intentar parsear como array
                    const expenseMatches = expensesString.match(/\{[^}]*\}/g);
                    if (expenseMatches) {
                        const expenses = [];
                        for (const expenseStr of expenseMatches) {
                            try {
                                const expense = JSON.parse(expenseStr);
                                if (expense.description && expense.amount) {
                                    expenses.push(expense);
                                }
                            } catch (e) {
                                console.warn('‚ö†Ô∏è No se pudo parsear expense individual:', expenseStr.substring(0, 100));
                            }
                        }

                        if (expenses.length > 0) {
                            result = {
                                expenses: expenses,
                                summary: {
                                    totalExpenses: expenses.reduce((sum, exp) => sum + (exp.amount || 0), 0),
                                    currency: 'UYU',
                                    expenseCount: expenses.length
                                }
                            };
                            console.log('‚úÖ Extracci√≥n directa exitosa:', expenses.length, 'gastos encontrados');
                            return result;
                        }
                    }
                }
            } catch (directError) {
                console.error('‚ùå Estrategia 3 fall√≥:', directError.message);
            }

            // Estrategia 4: Extraer gastos individuales si el JSON completo falla
            try {
                console.log('üîÑ Intentando estrategia 3: Extracci√≥n manual de gastos');
                const expenseMatches = aiResponse.match(/"description"\s*:\s*"([^"]+)"\s*,\s*"amount"\s*:\s*([0-9.]+)\s*,\s*"currency"\s*:\s*"([^"]+)"\s*,\s*"category"\s*:\s*"([^"]+)"\s*,\s*"date"\s*:\s*"([^"]+)"/g);

                if (expenseMatches && expenseMatches.length > 0) {
                    const expenses = expenseMatches.map(match => {
                        const [, description, amount, currency, category, date] = match.match(/"description"\s*:\s*"([^"]+)"\s*,\s*"amount"\s*:\s*([0-9.]+)\s*,\s*"currency"\s*:\s*"([^"]+)"\s*,\s*"category"\s*:\s*"([^"]+)"\s*,\s*"date"\s*:\s*"([^"]+)"/);
                        return {
                            description: description || 'Sin descripci√≥n',
                            amount: parseFloat(amount) || 0,
                            currency: currency || 'UYU',
                            category: category || 'Otros',
                            date: date || new Date().toISOString().split('T')[0],
                            confidence: 0.8
                        };
                    });

                    result = {
                        expenses,
                        summary: {
                            totalExpenses: expenses.reduce((sum, exp) => sum + exp.amount, 0),
                            currency: 'UYU',
                            expenseCount: expenses.length
                        }
                    };

                    console.log('‚úÖ Extracci√≥n manual exitosa:', expenses.length, 'gastos encontrados');
                    return result;
                }
            } catch (manualError) {
                console.error('‚ùå Estrategia 3 fall√≥:', manualError);
            }

            // Estrategia 4: √öltima opci√≥n - devolver los datos originales sin procesar por OpenAI
            console.log('üîÑ Intentando estrategia 4: Devoluci√≥n de datos originales');

            // Si no pudimos parsear la respuesta de OpenAI, devolver los gastos originales
            // que se extrajeron del CSV antes de enviarlos a OpenAI
            if (originalText && typeof originalText === 'string' && originalText.includes(' - ')) {
                console.log('üìä Usando estrategia de respaldo: devolver gastos originales del CSV');

                // Extraer gastos del texto original que se envi√≥ a OpenAI
                const lines = originalText.split('\n');
                const originalExpenses = [];

                for (const line of lines) {
                    if (line.includes(' - $')) {
                        try {
                            const parts = line.split(' - ');
                            if (parts.length >= 2) {
                                const [date, rest] = parts;
                                const [description, amountStr] = rest.split(' - $');

                                if (description && amountStr) {
                                    const amount = parseFloat(amountStr.trim());
                                    if (!isNaN(amount) && amount > 0) {
                                        originalExpenses.push({
                                            description: description.trim(),
                                            amount: amount,
                                            currency: amount < 150 ? 'USD' : 'UYU',
                                            category: 'Otros Gastos',
                                            date: date.trim(),
                                            confidence: 0.7
                                        });
                                    }
                                }
                            }
                        } catch (e) {
                            console.warn('‚ö†Ô∏è Error procesando l√≠nea original:', line);
                        }
                    }
                }

                if (originalExpenses.length > 0) {
                    result = {
                        expenses: originalExpenses,
                        summary: {
                            totalExpenses: originalExpenses.reduce((sum, exp) => sum + exp.amount, 0),
                            currency: 'UYU',
                            expenseCount: originalExpenses.length
                        }
                    };
                    console.log('‚úÖ Estrategia de respaldo exitosa:', originalExpenses.length, 'gastos devueltos');
                    return result;
                }
            }

            console.error('‚ùå Todas las estrategias de parseo fallaron');
            throw new Error('No se pudo parsear la respuesta de OpenAI. Se perdieron algunos datos, pero el sistema funcion√≥ parcialmente.');
        }
    } catch (error) {
        // Manejar diferentes tipos de errores
        if (error.name === 'AbortError') {
            console.error('‚è∞ Timeout: La solicitud a OpenAI tom√≥ demasiado tiempo (30 segundos)');
            throw new Error('La solicitud tom√≥ demasiado tiempo. Verifica tu conexi√≥n a internet e intenta nuevamente.');
        } else if (error.message && error.message.includes('fetch')) {
            console.error('üåê Error de conexi√≥n:', error.message);
            throw new Error('Error de conexi√≥n. Verifica tu conexi√≥n a internet e intenta nuevamente.');
        } else if (error.message && error.message.includes('API Key')) {
            console.error('üîë Error de API Key:', error.message);
            throw error; // Re-throw con el mensaje espec√≠fico
        } else {
            console.error('‚ùå Error analizando con OpenAI (usuario):', error.message);
            throw new Error(`Error procesando el an√°lisis: ${error.message}`);
        }
    }
}

/**
 * Verifica la conectividad con OpenAI API
 * @returns {Promise<Object>} Estado de la conexi√≥n
 */
async function checkOpenAIHealth() {
    try {
        if (!OPENAI_API_KEY) {
            return {
                status: 'error',
                message: 'OPENAI_API_KEY no est√° configurada',
                configured: false
            };
        }

        // Hacer una solicitud simple para verificar la API
        const controller = new AbortController();
        const timeoutId = setTimeout(() => controller.abort(), 10000); // 10 segundos timeout

        const response = await fetch('https://api.openai.com/v1/models', {
            method: 'GET',
            headers: {
                'Authorization': `Bearer ${OPENAI_API_KEY}`
            },
            signal: controller.signal
        });

        clearTimeout(timeoutId);

        if (response.ok) {
            return {
                status: 'success',
                message: 'OpenAI API funcionando correctamente',
                configured: true,
                responseTime: Date.now()
            };
        } else {
            return {
                status: 'error',
                message: `Error en OpenAI API: ${response.status} ${response.statusText}`,
                configured: true,
                errorCode: response.status
            };
        }

    } catch (error) {
        if (error.name === 'AbortError') {
            return {
                status: 'timeout',
                message: 'Timeout verificando OpenAI API',
                configured: !!OPENAI_API_KEY
            };
        }

        return {
            status: 'error',
            message: `Error de conexi√≥n: ${error.message}`,
            configured: !!OPENAI_API_KEY
        };
    }
}

/**
 * Obtiene datos completos del usuario para contexto de IA
 * @param {ObjectId|string} userId - ID del usuario
 * @returns {Promise<Object>} Datos completos del usuario
 */
async function getCompleteUserData(userId) {
    try {
        console.log('üìä Obteniendo datos completos del usuario para contexto de IA...');

        // Obtener informaci√≥n del usuario
        const user = await User.findById(userId).select('+aiApiKey').lean();
        if (!user) {
            throw new Error('Usuario no encontrado');
        }

        // Obtener transacciones del usuario (√∫ltimos 12 meses para contexto)
        const twelveMonthsAgo = new Date();
        twelveMonthsAgo.setMonth(twelveMonthsAgo.getMonth() - 12);

        const transactions = await Transaction.find({
            userId: userId,
            date: { $gte: twelveMonthsAgo }
        })
        .sort({ date: -1 })
        .limit(1000) // Limitar para no sobrecargar
        .lean();

        // Obtener categor√≠as del usuario
        const categories = await Category.find({
            $or: [
                { userId: userId },
                { userId: null, isDefault: true } // Categor√≠as por defecto
            ],
            isActive: true
        }).sort({ type: 1, name: 1 }).lean();

        // Obtener metas del usuario
        const goals = await Goal.find({ userId: userId })
        .sort({ createdAt: -1 })
        .lean();

        // Calcular estad√≠sticas generales
        const stats = await Transaction.getStats(userId);

        // Calcular estad√≠sticas por categor√≠a
        const categoryStats = await Transaction.getCategoryStats(userId);

        // Calcular estad√≠sticas mensuales
        const monthlyStats = await Transaction.getMonthlyStats(
            userId,
            twelveMonthsAgo,
            new Date()
        );

        const completeData = {
            user: {
                id: user._id,
                username: user.username,
                firstName: user.firstName,
                lastName: user.lastName,
                email: user.email,
                currency: user.currency,
                timezone: user.timezone,
                createdAt: user.createdAt,
                lastLogin: user.lastLogin
            },
            transactions: {
                total: transactions.length,
                recent: transactions.slice(0, 50), // Solo las m√°s recientes para contexto
                all: transactions, // Todas las transacciones del per√≠odo
                stats: stats,
                categoryStats: categoryStats,
                monthlyStats: monthlyStats
            },
            categories: categories,
            goals: goals,
            summary: {
                totalIncome: stats.totalIncome || 0,
                totalExpenses: stats.totalExpenses || 0,
                balance: (stats.totalIncome || 0) - (stats.totalExpenses || 0),
                totalSavings: goals.reduce((sum, goal) => sum + (goal.currentSaved || 0), 0),
                activeGoals: goals.filter(g => !g.completed).length,
                transactionCount: transactions.length,
                categoriesCount: categories.length,
                dataPeriod: '√∫ltimos 12 meses'
            }
        };

        console.log('‚úÖ Datos completos obtenidos para contexto de IA');
        return completeData;

    } catch (error) {
        console.error('‚ùå Error obteniendo datos completos del usuario:', error);
        throw new Error(`Error obteniendo datos del usuario: ${error.message}`);
    }
}

/**
 * Genera contexto detallado para consultas de IA
 * @param {ObjectId|string} userId - ID del usuario
 * @param {string} queryType - Tipo de consulta (chat, diagnosis, analysis)
 * @returns {Promise<string>} Contexto formateado para IA
 */
async function generateAIContext(userId, queryType = 'general') {
    try {
        const userData = await getCompleteUserData(userId);

        let context = '';

        // Informaci√≥n b√°sica del usuario
        context += `üë§ USUARIO: ${userData.user.firstName} ${userData.user.lastName}\n`;
        context += `üìß Email: ${userData.user.email}\n`;
        context += `üí± Moneda preferida: ${userData.user.currency}\n`;
        context += `üìÖ Miembro desde: ${new Date(userData.user.createdAt).toLocaleDateString('es-UY')}\n\n`;

        // Resumen financiero
        context += `üìä RESUMEN FINANCIERO (√∫ltimos 12 meses):\n`;
        context += `- üí∞ Ingresos totales: $${userData.summary.totalIncome.toLocaleString('es-UY')} ${userData.user.currency}\n`;
        context += `- üí∏ Gastos totales: $${userData.summary.totalExpenses.toLocaleString('es-UY')} ${userData.user.currency}\n`;
        context += `- ‚öñÔ∏è Balance: $${userData.summary.balance.toLocaleString('es-UY')} ${userData.user.currency}\n`;
        context += `- üè¶ Ahorros totales: $${userData.summary.totalSavings.toLocaleString('es-UY')} ${userData.user.currency}\n`;
        context += `- üìà Metas activas: ${userData.summary.activeGoals}\n`;
        context += `- üìã Total de transacciones: ${userData.summary.transactionCount}\n\n`;

        // Metas de ahorro (activas y completadas)
        if (userData.goals.length > 0) {
            const activeGoals = userData.goals.filter(g => !g.completed);
            const completedGoals = userData.goals.filter(g => g.completed);
            
            context += `üéØ METAS DE AHORRO:\n`;
            context += `Total de metas: ${userData.goals.length} (${activeGoals.length} activas, ${completedGoals.length} completadas)\n\n`;
            
            if (activeGoals.length > 0) {
                context += `üìç METAS ACTIVAS:\n`;
                activeGoals.forEach((goal, index) => {
                    const progress = goal.amount > 0 ? Math.round((goal.currentSaved / goal.amount) * 100) : 0;
                    const remainingAmount = goal.amount - (goal.currentSaved || 0);
                    const daysToDeadline = goal.deadline ? Math.ceil((new Date(goal.deadline) - new Date()) / (1000 * 60 * 60 * 24)) : null;
                    
                    context += `${index + 1}. üìù ${goal.name}\n`;
                    context += `   üí∞ Meta: $${goal.amount.toLocaleString('es-UY')} ${userData.user.currency}\n`;
                    context += `   üí≥ Ahorrado: $${(goal.currentSaved || 0).toLocaleString('es-UY')} ${userData.user.currency}\n`;
                    context += `   üìä Progreso: ${progress}% (faltan $${remainingAmount.toLocaleString('es-UY')})\n`;
                    
                    if (goal.deadline) {
                        context += `   üìÖ Fecha l√≠mite: ${new Date(goal.deadline).toLocaleDateString('es-UY')}`;
                        if (daysToDeadline !== null) {
                            if (daysToDeadline > 0) {
                                context += ` (en ${daysToDeadline} d√≠as)`;
                            } else if (daysToDeadline === 0) {
                                context += ` (¬°HOY!)`;
                            } else {
                                context += ` (‚ö†Ô∏è Vencida hace ${Math.abs(daysToDeadline)} d√≠as)`;
                            }
                        }
                        context += '\n';
                    }
                    
                    if (goal.description) {
                        context += `   üìÑ Descripci√≥n: ${goal.description}\n`;
                    }
                    
                    if (goal.priority) {
                        context += `   üî• Prioridad: ${goal.priority}\n`;
                    }
                    
                    context += '\n';
                });
            }
            
            if (completedGoals.length > 0) {
                context += `‚úÖ METAS COMPLETADAS:\n`;
                completedGoals.slice(0, 5).forEach((goal, index) => { // Solo las √∫ltimas 5
                    context += `${index + 1}. ‚úîÔ∏è ${goal.name} - $${goal.amount.toLocaleString('es-UY')} ${userData.user.currency}`;
                    if (goal.completedDate) {
                        context += ` (completada el ${new Date(goal.completedDate).toLocaleDateString('es-UY')})`;
                    }
                    context += '\n';
                });
                if (completedGoals.length > 5) {
                    context += `   ... y ${completedGoals.length - 5} metas completadas m√°s\n`;
                }
                context += '\n';
            }
        }

        // Transacciones recientes (√∫ltimas 20)
        if (userData.transactions.recent.length > 0) {
            context += `üóÇÔ∏è TRANSACCIONES RECIENTES:\n`;
            userData.transactions.recent.slice(0, 20).forEach((transaction, index) => {
                const type = transaction.type === 'income' ? 'üí∞ INGRESO' : 'üí∏ GASTO';
                const currency = transaction.currency || userData.user.currency;
                context += `${index + 1}. ${type} - ${transaction.description}\n`;
                context += `   - Monto: ${currency} $${transaction.amount.toLocaleString('es-UY')}\n`;
                context += `   - Categor√≠a: ${transaction.category}\n`;
                context += `   - Fecha: ${new Date(transaction.date).toLocaleDateString('es-UY')}\n\n`;
            });
        }

        // Estad√≠sticas por categor√≠a
        if (userData.transactions.categoryStats.length > 0) {
            context += `üìà GASTOS POR CATEGOR√çA (principales):\n`;
            userData.transactions.categoryStats
                .filter(cat => cat._id && typeof cat._id === 'object' && cat._id.type === 'expense')
                .sort((a, b) => (b.totalAmount || 0) - (a.totalAmount || 0))
                .slice(0, 10)
                .forEach((cat, index) => {
                    context += `${index + 1}. ${cat._id.category}: $${(cat.totalAmount || 0).toLocaleString('es-UY')} ${userData.user.currency}\n`;
                });
            context += '\n';
        }

        // Tendencias mensuales
        if (userData.transactions.monthlyStats.length > 0) {
            context += `üìä TENDENCIAS MENSUALES:\n`;
            userData.transactions.monthlyStats
                .sort((a, b) => {
                    if (a._id.year !== b._id.year) return b._id.year - a._id.year;
                    return b._id.month - a._id.month;
                })
                .slice(0, 6)
                .forEach(month => {
                    const monthName = new Date(month._id.year, month._id.month - 1, 1).toLocaleDateString('es-UY', { month: 'long', year: 'numeric' });
                    context += `${monthName}:\n`;
                    context += `  - Ingresos: $${(month.income || 0).toLocaleString('es-UY')}\n`;
                    context += `  - Gastos: $${(month.expenses || 0).toLocaleString('es-UY')}\n`;
                    context += `  - Balance: $${((month.income || 0) - (month.expenses || 0)).toLocaleString('es-UY')}\n\n`;
                });
        }

        return context;

    } catch (error) {
        console.error('‚ùå Error generando contexto para IA:', error);
        return 'Error obteniendo contexto del usuario. Informaci√≥n limitada disponible.';
    }
}

/**
 * Procesa consultas avanzadas con IA usando contexto completo
 * @param {string} query - Consulta del usuario
 * @param {ObjectId|string} userId - ID del usuario
 * @param {Object} additionalData - Datos adicionales del frontend
 * @returns {Promise<Object>} Respuesta de la IA con an√°lisis completo
 */
async function processAdvancedQuery(query, userId, additionalData = {}) {
    try {
        console.log('üß† Procesando consulta avanzada con contexto completo...');
        console.log('üë§ UserId:', userId);
        console.log('üìä Additional data:', additionalData ? Object.keys(additionalData) : 'none');

        // Generar contexto completo
        console.log('üîÑ Generando contexto de IA...');
        const context = await generateAIContext(userId, 'advanced');
        console.log('‚úÖ Contexto generado, longitud:', context ? context.length : 0, 'caracteres');
        
        // Verificar si el contexto no es demasiado largo y truncar si es necesario
        let finalContext = context;
        if (context && context.length > 50000) {
            console.warn('‚ö†Ô∏è Contexto muy largo, truncando para evitar errores:', context.length, 'caracteres');
            finalContext = context.substring(0, 50000) + '\n\n[CONTEXTO TRUNCADO POR LONGITUD]';
            console.log('‚úÇÔ∏è Contexto truncado a:', finalContext.length, 'caracteres');
        }

        // Crear prompt avanzado para la IA
        const systemPrompt = `Eres un Asesor Financiero Personal Inteligente especializado en finanzas uruguayas y planificaci√≥n de metas de ahorro.
        Tienes acceso a TODA la informaci√≥n financiera del usuario, incluyendo:

        - Historial completo de transacciones (√∫ltimos 12 meses)
        - Todas las categor√≠as de gastos e ingresos con an√°lisis detallado
        - Metas de ahorro activas y completadas con progreso espec√≠fico
        - Estad√≠sticas mensuales y tendencias de ahorro
        - Informaci√≥n personal del usuario y preferencias
        - An√°lisis de patrones de gastos e ingresos

        ESPECIALIZACI√ìN EN METAS DE AHORRO:
        - Analiza el progreso de cada meta individual con fechas espec√≠ficas
        - Identifica si las metas son realistas bas√°ndote en los ingresos y gastos actuales
        - Sugiere estrategias espec√≠ficas para acelerar el progreso hacia las metas
        - Calcula cu√°nto deber√≠a ahorrar mensualmente para cumplir cada meta a tiempo
        - Identifica gastos que podr√≠an reducirse para aumentar el ahorro
        - Recomienda priorizaci√≥n de metas basada en urgencia y viabilidad

        INSTRUCCIONES ESPEC√çFICAS:
        1. Usa TODOS los datos disponibles para dar respuestas precisas y personalizadas
        2. Incluye n√∫meros espec√≠ficos, montos, fechas y c√°lculos concretos
        3. Para consultas sobre metas, proporciona an√°lisis detallado de cada meta activa
        4. Calcula autom√°ticamente cu√°nto falta ahorrar y en cu√°nto tiempo
        5. Identifica patrones en gastos que afecten las metas de ahorro
        6. Sugiere ajustes espec√≠ficos en el presupuesto para acelerar el ahorro
        7. Compara el progreso actual con lo necesario para cumplir las fechas l√≠mite
        8. Mant√©n un tono profesional pero cercano y muy motivador
        9. Si una meta parece inalcanzable, sugiere alternativas realistas
        10. Incluye consejos pr√°cticos y accionables basados en datos reales

        IMPORTANTE: Base todas tus respuestas en los datos reales del usuario. No inventes informaci√≥n. 
        S√© especialmente detallado cuando analices metas de ahorro y proporciona c√°lculos espec√≠ficos.`;

        const userPrompt = `Consulta del usuario: "${query}"

        Informaci√≥n financiera completa del usuario:
        ${finalContext}

        ${additionalData ? `Datos adicionales del contexto actual: ${JSON.stringify(additionalData)}` : ''}

        Por favor, analiza esta consulta considerando toda la informaci√≥n financiera disponible y proporciona una respuesta detallada, espec√≠fica y √∫til.`;

        // Preparar solicitud a OpenAI
        const controller = new AbortController();
        const timeoutId = setTimeout(() => {
            console.log('‚è∞ Timeout alcanzado, abortando consulta avanzada...');
            controller.abort();
        }, 45000); // Aumentar timeout a 45 segundos

        console.log('üöÄ Enviando solicitud a OpenAI...');
        console.log('üìù Longitud del prompt del usuario:', userPrompt.length, 'caracteres');
        
        const response = await fetch('https://api.openai.com/v1/chat/completions', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${OPENAI_API_KEY}`
            },
            body: JSON.stringify({
                model: 'gpt-4o-mini',
                messages: [
                    { role: 'system', content: systemPrompt },
                    { role: 'user', content: userPrompt }
                ],
                max_tokens: 2000,
                temperature: 0.7
            }),
            signal: controller.signal
        });

        clearTimeout(timeoutId);
        console.log('üì• Respuesta recibida de OpenAI, status:', response.status);

        if (!response.ok) {
            const errorText = await response.text();
            console.error('‚ùå Error en OpenAI API:', response.status, errorText);
            throw new Error(`Error en OpenAI API: ${response.status} - ${errorText}`);
        }

        const data = await response.json();
        console.log('üìã Datos de respuesta de OpenAI:', {
            choices: data.choices?.length || 0,
            usage: data.usage || 'no usage info'
        });
        
        const aiResponse = data.choices[0].message.content;
        console.log('‚úÖ Consulta avanzada procesada exitosamente, longitud respuesta:', aiResponse.length);

        return {
            success: true,
            response: aiResponse,
            contextUsed: true,
            dataPoints: {
                transactionsAnalyzed: finalContext.includes('TRANSACCIONES RECIENTES') ? 's√≠' : 'no',
                goalsIncluded: finalContext.includes('METAS ACTIVAS') ? 's√≠' : 'no',
                categoriesIncluded: finalContext.includes('GASTOS POR CATEGOR√çA') ? 's√≠' : 'no',
                trendsIncluded: finalContext.includes('TENDENCIAS MENSUALES') ? 's√≠' : 'no',
                contextTruncated: finalContext !== context ? 's√≠' : 'no',
                contextLength: finalContext.length
            },
            timestamp: new Date().toISOString()
        };

    } catch (error) {
        console.error('‚ùå Error procesando consulta avanzada:', error);
        
        // Proporcionar m√°s informaci√≥n espec√≠fica sobre el error
        let errorMessage = 'Lo siento, no pude procesar tu consulta avanzada en este momento.';
        let errorDetails = error.message;
        
        if (error.name === 'AbortError') {
            errorMessage = 'La consulta tard√≥ demasiado en procesarse. Por favor, intenta con una consulta m√°s espec√≠fica.';
            errorDetails = 'Timeout de 45 segundos alcanzado';
        } else if (error.message?.includes('fetch')) {
            errorMessage = 'Problema de conexi√≥n con el servicio de IA. Por favor, intenta nuevamente en unos momentos.';
        } else if (error.message?.includes('API')) {
            errorMessage = 'Error en el servicio de IA. Por favor, contacta al administrador si el problema persiste.';
        }
        
        return {
            success: false,
            response: errorMessage,
            error: errorDetails,
            timestamp: new Date().toISOString()
        };
    }
}

/**
 * Realiza diagn√≥stico financiero completo con IA
 * @param {ObjectId|string} userId - ID del usuario
 * @param {Object} additionalData - Datos adicionales del frontend
 * @returns {Promise<Object>} Diagn√≥stico completo con recomendaciones
 */
async function performCompleteFinancialDiagnosis(userId, additionalData = {}) {
    try {
        console.log('üîç Realizando diagn√≥stico financiero completo...');

        const context = await generateAIContext(userId, 'diagnosis');
        const userData = await getCompleteUserData(userId);

        const systemPrompt = `Eres un Profesional en Finanzas Personales con 20+ a√±os de experiencia asesorando a individuos y familias en Uruguay.

        Tu especializaci√≥n incluye:
        - Diagn√≥stico completo de situaciones financieras
        - An√°lisis de patrones de gasto problem√°ticos
        - Recomendaciones personalizadas de ahorro e inversi√≥n
        - Estrategias de reducci√≥n de deudas
        - Planificaci√≥n financiera a corto y largo plazo
        - Optimizaci√≥n de presupuestos familiares
        - Asesoramiento en metas de ahorro

        INSTRUCCIONES PARA DIAGN√ìSTICO:
        1. Analiza la situaci√≥n financiera actual de manera profunda y detallada
        2. Identifica fortalezas y √°reas de mejora espec√≠ficas
        3. Proporciona recomendaciones pr√°cticas basadas en datos reales
        4. Incluye an√°lisis de tendencias y patrones hist√≥ricos
        5. Prioriza estrategias conservadoras y realistas para el contexto uruguayo
        6. S√© espec√≠fico con n√∫meros, porcentajes y plazos realistas
        7. Mant√©n un tono profesional pero accesible y motivador
        8. Incluye metas SMART (Specific, Measurable, Achievable, Relevant, Time-bound)

        ESTRUCTURA DEL DIAGN√ìSTICO:
        1. üìä RESUMEN EJECUTIVO
        2. üí∞ AN√ÅLISIS DE INGRESOS
        3. üí∏ AN√ÅLISIS DE GASTOS
        4. üéØ EVALUACI√ìN DE METAS
        5. üìà TENDENCIAS Y PATRONES
        6. ‚úÖ FORTALEZAS IDENTIFICADAS
        7. ‚ö†Ô∏è √ÅREAS DE MEJORA
        8. üéØ RECOMENDACIONES ESPEC√çFICAS
        9. üìÖ PLAN DE ACCI√ìN DETALLADO

        IMPORTANTE: Usa TODOS los datos disponibles del usuario para un an√°lisis completo y personalizado.`;

        const userPrompt = `Realiza un diagn√≥stico financiero completo y detallado basado en toda la informaci√≥n disponible:

        ${context}

        ${additionalData ? `Datos adicionales del contexto actual: ${JSON.stringify(additionalData)}` : ''}

        Por favor, proporciona un diagn√≥stico profesional completo que incluya an√°lisis detallado, recomendaciones espec√≠ficas y un plan de acci√≥n pr√°ctico.`;

        // Preparar solicitud a OpenAI
        const controller = new AbortController();
        const timeoutId = setTimeout(() => controller.abort(), 45000); // M√°s tiempo para diagn√≥sticos

        const response = await fetch('https://api.openai.com/v1/chat/completions', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${OPENAI_API_KEY}`
            },
            body: JSON.stringify({
                model: 'gpt-4o-mini',
                messages: [
                    { role: 'system', content: systemPrompt },
                    { role: 'user', content: userPrompt }
                ],
                max_tokens: 3000,
                temperature: 0.6
            }),
            signal: controller.signal
        });

        clearTimeout(timeoutId);

        if (!response.ok) {
            throw new Error(`Error en OpenAI API: ${response.status}`);
        }

        const data = await response.json();
        const diagnosis = data.choices[0].message.content;

        console.log('‚úÖ Diagn√≥stico financiero completo realizado');

        return {
            success: true,
            diagnosis: diagnosis,
            dataAnalyzed: {
                transactions: userData.transactions.total,
                categories: userData.categories.length,
                goals: userData.goals.length,
                timePeriod: '√∫ltimos 12 meses'
            },
            recommendations: {
                // Aqu√≠ se podr√≠an extraer recomendaciones espec√≠ficas del diagn√≥stico
                generated: true
            },
            timestamp: new Date().toISOString()
        };

    } catch (error) {
        console.error('‚ùå Error realizando diagn√≥stico completo:', error);
        return {
            success: false,
            diagnosis: 'No se pudo completar el diagn√≥stico en este momento.',
            error: error.message,
            timestamp: new Date().toISOString()
        };
    }
}

// ==================== EXPORTAR FUNCIONES ====================

module.exports = {
    // Funciones originales
    analyzeTextWithAI,
    analyzeTextWithUserKey,
    checkOpenAIHealth,

    // Nuevas funciones con acceso completo a datos
    getCompleteUserData,
    generateAIContext,
    processAdvancedQuery,
    performCompleteFinancialDiagnosis,

    // Funciones de utilidad para categor√≠as
    getExpenseCategories,
    validateAndCorrectCategories
};
