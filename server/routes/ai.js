/**
 * ü§ñ RUTAS DE IA - API
 *
 * Endpoints para an√°lisis con IA
 * Incluye rutas p√∫blicas sin autenticaci√≥n y rutas protegidas
 * Autor: Senior Backend Developer
 */

const express = require('express');
const { authenticateToken } = require('../middleware/auth');
const multer = require('multer');
const fs = require('fs');
const path = require('path');
const { spawn, execSync } = require('child_process');
const {
    analyzeTextWithAI,
    checkOpenAIHealth,
    getCompleteUserData,
    generateAIContext,
    processAdvancedQuery,
    performCompleteFinancialDiagnosis
} = require('../services/aiService');

const router = express.Router();

// Configuraci√≥n de multer para manejar la subida de archivos
const storage = multer.diskStorage({
    destination: (req, file, cb) => {
        const uploadDir = path.join(__dirname, '../../uploads/');

        // Crear el directorio si no existe
        if (!fs.existsSync(uploadDir)) {
            fs.mkdirSync(uploadDir, { recursive: true });
            console.log('üìÅ Directorio uploads creado autom√°ticamente:', uploadDir);
        } else {
            console.log('üìÅ Directorio uploads ya existe:', uploadDir);
        }

        cb(null, uploadDir);
    },
    filename: (req, file, cb) => {
        const fileName = `${Date.now()}-${file.originalname}`;
        console.log('üìÑ Archivo a guardar:', fileName);
        cb(null, fileName);
    }
});
const upload = multer({ storage: storage });

// ==================== ENDPOINTS P√öBLICOS (SIN AUTENTICACI√ìN) ====================

/**
 * POST /api/public/ai/analyze-csv
 * Analiza un CSV sin autenticaci√≥n (modo demo)
 */
router.post('/analyze-csv', upload.single('csv'), async (req, res) => {
    try {
        console.log('üìÑ === INICIANDO PROCESAMIENTO DE CSV ===');
        console.log('üìÑ Headers recibidos:', JSON.stringify(req.headers, null, 2));

        if (!req.file) {
            console.error('‚ùå No se recibi√≥ archivo CSV en la solicitud');
            return res.status(400).json({
                error: 'Archivo CSV requerido',
                message: 'Debes subir un archivo CSV para analizar'
            });
        }

        const filePath = req.file.path;
        const fileName = req.file.originalname;
        const fileSize = req.file.size;

        console.log(`üìÑ CSV recibido: ${fileName}`);
        console.log(`üìÑ Ruta del archivo: ${filePath}`);
        console.log(`üìÑ Tama√±o del archivo: ${fileSize} bytes`);

        // Verificar que el archivo existe usando ruta absoluta
        const absoluteFilePath = path.resolve(filePath);
        console.log(`üìÑ Ruta absoluta del archivo: ${absoluteFilePath}`);

        if (!fs.existsSync(absoluteFilePath)) {
            console.error(`‚ùå Archivo no encontrado en el servidor: ${absoluteFilePath}`);
            return res.status(500).json({
                error: 'Archivo no encontrado',
                message: 'El archivo CSV no se guard√≥ correctamente en el servidor'
            });
        }

        // Verificar tama√±o del archivo (m√°ximo 10MB)
        const maxSize = 10 * 1024 * 1024; // 10MB
        if (fileSize > maxSize) {
            console.error(`‚ùå Archivo CSV demasiado grande: ${fileSize} bytes`);
            // Limpiar archivo temporal
            if (fs.existsSync(absoluteFilePath)) {
                fs.unlinkSync(absoluteFilePath);
                console.log('üßπ Archivo temporal eliminado por tama√±o excedido:', absoluteFilePath);
            }
            return res.status(400).json({
                error: 'Archivo demasiado grande',
                message: 'El archivo CSV no puede superar los 10MB'
            });
        }

        console.log('ü§ñ Verificando funcionamiento de OpenAI antes de procesar...');

        // Verificar que OpenAI est√© funcionando antes de proceder
        const openaiHealth = await checkOpenAIHealth();

        if (openaiHealth.status !== 'success') {
            console.error('‚ùå OpenAI no est√° funcionando:', openaiHealth.message);

            // Limpiar archivo temporal
            if (fs.existsSync(absoluteFilePath)) {
                fs.unlinkSync(absoluteFilePath);
                console.log('üßπ Archivo temporal eliminado por error OpenAI:', absoluteFilePath);
            }

            return res.status(503).json({
                error: 'Servicio de IA no disponible',
                message: 'OpenAI no est√° funcionando correctamente. No se puede analizar el CSV.',
                details: openaiHealth.message,
                timestamp: new Date().toISOString()
            });
        }

        console.log('‚úÖ OpenAI funcionando correctamente');

        // Verificar API Key del usuario desde el FormData
        const userApiKey = req.body.userApiKey || req.body.apiKey;
        console.log('üîë API Key del usuario:', userApiKey ? 'Proporcionada por el cliente' : 'No proporcionada');

        // Verificar si tenemos API key (del servidor o del usuario)
        const serverApiKey = process.env.OPENAI_API_KEY;
        const effectiveApiKey = (userApiKey && userApiKey.startsWith('sk-')) ? userApiKey : serverApiKey;

        if (!effectiveApiKey || !effectiveApiKey.startsWith('sk-')) {
            console.error('‚ùå No hay API Key v√°lida disponible');

            // Limpiar archivo temporal
            if (fs.existsSync(absoluteFilePath)) {
                fs.unlinkSync(absoluteFilePath);
                console.log('üßπ Archivo temporal eliminado por falta de API Key:', absoluteFilePath);
            }

            return res.status(400).json({
                error: 'API Key requerida',
                message: 'Se requiere una API Key v√°lida de OpenAI para analizar CSVs.',
                details: 'Configura OPENAI_API_KEY en el servidor o proporciona tu propia API Key',
                timestamp: new Date().toISOString()
            });
        }

        console.log('üìÑ Iniciando parseo de CSV...');

        // Leer y parsear el archivo CSV
        const csvContent = fs.readFileSync(absoluteFilePath, 'utf-8');
        console.log(`üìÑ Contenido CSV le√≠do: ${csvContent.length} caracteres`);

        // Parsear CSV b√°sico para extraer gastos
        const expenses = parseCSVExpenses(csvContent);
        console.log(`üìÑ Gastos extra√≠dos del CSV: ${expenses.length}`);

        if (expenses.length === 0) {
            console.warn('üö® No se encontraron gastos en el CSV procesado');

            // Limpiar archivo temporal
            if (fs.existsSync(absoluteFilePath)) {
                fs.unlinkSync(absoluteFilePath);
                console.log('üßπ Archivo temporal eliminado - sin gastos encontrados:', absoluteFilePath);
            }

            return res.status(400).json({
                error: 'Sin gastos encontrados',
                message: 'El archivo CSV no contiene gastos v√°lidos para analizar',
                details: {
                    suggestions: [
                        'Verifica que el CSV contenga transacciones de gastos',
                        'Aseg√∫rate de que las columnas de fecha, descripci√≥n y monto est√©n presentes',
                        'El CSV debe estar en formato de estado de cuenta bancario'
                    ]
                },
                timestamp: new Date().toISOString()
            });
        }

        console.log('ü§ñ Iniciando an√°lisis con OpenAI...');

        let analysis;
        let analysisMode;

        // Solo usamos an√°lisis con OpenAI (ya que eliminamos el b√°sico)
        analysisMode = userApiKey ? 'openai_user' : 'openai_server';

        console.log('ü§ñ Enviando gastos extra√≠dos a OpenAI para an√°lisis...');

        // Convertir gastos a texto para an√°lisis
        const expensesText = expenses.map(expense =>
            `${expense.date} - ${expense.description} - $${expense.amount}`
        ).join('\n');

        // Si es API key del usuario, usamos la funci√≥n especial
        if (userApiKey) {
            const { analyzeTextWithUserKey } = require('../services/aiService');
            analysis = await analyzeTextWithUserKey(expensesText, userApiKey, 'anonymous');
        } else {
            analysis = await analyzeTextWithAI(expensesText, 'anonymous');
        }

        console.log('‚úÖ An√°lisis con OpenAI completado exitosamente');

        // Limpiar archivo temporal
        if (fs.existsSync(absoluteFilePath)) {
            fs.unlinkSync(absoluteFilePath);
            console.log('üßπ Archivo temporal eliminado:', absoluteFilePath);
        }

        res.json({
            success: true,
            data: {
                extractedExpenses: expenses,
                extractedText: expensesText.substring(0, 500) + (expensesText.length > 500 ? '...' : ''),
                analysis: analysis,
                analysisMode: analysisMode,
                message: analysisMode === 'openai_server'
                    ? 'CSV analizado correctamente con OpenAI (API del servidor)'
                    : 'CSV analizado correctamente con OpenAI (tu API key)'
            }
        });

    } catch (error) {
        console.error('‚ùå Error analizando CSV p√∫blico:', error);
        console.error('‚ùå Stack trace:', error.stack);
        console.error('‚ùå Tipo de error:', error.constructor.name);
        console.error('‚ùå Mensaje de error completo:', error.message);

        // Limpiar archivo si existe
        try {
            if (req.file && req.file.path) {
                const cleanupPath = path.resolve(req.file.path);
                if (fs.existsSync(cleanupPath)) {
                    fs.unlinkSync(cleanupPath);
                    console.log('üßπ Archivo temporal limpiado:', cleanupPath);
                }
            }
        } catch (cleanupError) {
            console.error('‚ùå Error limpiando archivo temporal:', cleanupError);
        }

        // Determinar el tipo de error y respuesta apropiada
        let statusCode = 500;
        let errorMessage = 'Error interno del servidor';
        let showDetailsInProduction = false;

        if (error.message && error.message.includes('API Key')) {
            statusCode = 500;
            errorMessage = 'Configuraci√≥n de API incompleta';
        } else if (error.message && error.message.includes('fetch')) {
            statusCode = 503;
            errorMessage = 'Error de conexi√≥n con el servicio de IA';
        } else if (error.message && error.message.includes('timeout')) {
            statusCode = 504;
            errorMessage = 'Timeout en el procesamiento';
        } else if (error.message && error.message.includes('CSV')) {
            statusCode = 400;
            errorMessage = 'Error procesando el archivo CSV';
        } else if (error.message && (error.message.includes('L√≠mite de uso de OpenAI') || error.message.includes('rate limit'))) {
            statusCode = 429;
            errorMessage = 'L√≠mite de uso de OpenAI excedido';
            showDetailsInProduction = true;
            console.log('üî• Detectado error de rate limit, mostrando detalles en producci√≥n');
        }

        const responseData = {
            error: error.constructor.name || 'Error interno del servidor',
            message: errorMessage,
            details: (process.env.NODE_ENV === 'development' || showDetailsInProduction) ? error.message : undefined,
            timestamp: new Date().toISOString()
        };

        console.error('üì§ Enviando respuesta de error:', JSON.stringify(responseData, null, 2));

        res.status(statusCode).json(responseData);
    }
});

/**
 * Funci√≥n auxiliar para parsear gastos desde CSV de estado de cuenta
 * @param {string} csvContent - Contenido del archivo CSV
 * @returns {Array} Array de gastos extra√≠dos
 */
/*
function parseCSVExpenses(csvContent) {
    const expenses = [];
    const lines = csvContent.split('\n');

    console.log(`üìÑ Procesando ${lines.length} l√≠neas del CSV`);

    // Detectar si es formato CSV est√°ndar o formato Ita√∫
    const headerLine = lines[0] || '';
    const isStandardCSV = headerLine.includes('fecha,descripcion');

    if (isStandardCSV) {
        console.log('üìÑ Detectado formato CSV est√°ndar con headers');
        return parseStandardCSV(lines);
    } else {
        console.log('üìÑ Detectado formato Ita√∫ o similar');
        return parseItauCSV(lines);
    }
}
*/

/**
 * Parsear CSV en formato est√°ndar con headers
 */
/*
function parseStandardCSV(lines) {
    const expenses = [];

    // Determinar el n√∫mero de columnas basado en el header
    const headerLine = lines[0].toLowerCase();
    const isSimpleFormat = headerLine.includes('fecha,descripcion,categoria,importe_pesos,importe_dolares');

    for (let i = 1; i < lines.length; i++) { // Saltar header
        const line = lines[i].trim();
        if (!line) continue;

        try {
            // Parsear l√≠nea CSV
            const columns = parseCSVLine(line);

            let fecha, descripcion, categoria, importe_pesos, importe_dolares;

            if (isSimpleFormat && columns.length >= 5) {
                // Formato simple: fecha,descripcion,categoria,importe_pesos,importe_dolares
                [fecha, descripcion, categoria, importe_pesos, importe_dolares] = columns;
            } else if (!isSimpleFormat && columns.length >= 8) {
                // Formato extendido: fecha,descripcion,cuotas,categoria,importe_pesos,importe_dolares,tipo,archivo_origen
                [fecha, descripcion, , categoria, importe_pesos, importe_dolares] = columns;
            } else {
                continue; // Saltar l√≠neas con formato incorrecto
            }

            // Solo procesar gastos (excluir REDIVA y otros tipos de transacci√≥n)
            if (descripcion && descripcion.toLowerCase().includes('rediva')) continue;
            if (descripcion && descripcion.toLowerCase().includes('debito')) continue;
            if (descripcion && descripcion.toLowerCase().includes('credito')) continue;

            // Determinar el monto y moneda a usar
            let amount = 0;
            let currency = 'UYU';

            if (importe_dolares && parseFloat(importe_dolares) > 0) {
                // Si hay importe en d√≥lares, usar ese
                amount = parseFloat(importe_dolares.replace(',', '.'));
                currency = 'USD';
            } else if (importe_pesos && parseFloat(importe_pesos) > 0) {
                // Si no hay d√≥lares pero hay pesos, usar pesos
                amount = parseFloat(importe_pesos.replace(',', '.'));
                currency = 'UYU';
            }

            // Aplicar l√≥gica de detecci√≥n autom√°tica de moneda seg√∫n el monto
            if (currency === 'UYU' && amount < 150) {
                currency = 'USD'; // Si es menor a 150 pesos, probablemente sea d√≥lares
            } else if (currency === 'USD' && amount >= 150) {
                currency = 'UYU'; // Si es mayor o igual a 150 d√≥lares, probablemente sea pesos
            }

            if (!isNaN(amount) && amount > 0 && fecha) {
                expenses.push({
                    date: fecha,
                    description: descripcion ? descripcion.trim() : 'Sin descripci√≥n',
                    amount: amount,
                    currency: currency,
                    category: categoria || 'Otros',
                    original_pesos: importe_pesos || '',
                    original_dolares: importe_dolares || ''
                });
            }
        } catch (parseError) {
            console.warn(`‚ö†Ô∏è Error parseando l√≠nea CSV ${i + 1}: ${line}`, parseError);
        }
    }

    console.log(`üìÑ Total de gastos extra√≠dos del CSV est√°ndar (${isSimpleFormat ? 'formato simple' : 'formato extendido'}): ${expenses.length}`);
    return expenses;
}
*/

/**
 * Parsear l√≠nea CSV considerando comillas
 */
/*
function parseCSVLine(line) {
    const result = [];
    let current = '';
    let inQuotes = false;

    for (let i = 0; i < line.length; i++) {
        const char = line[i];

        if (char === '"') {
            inQuotes = !inQuotes;
        } else if (char === ',' && !inQuotes) {
            result.push(current.trim());
            current = '';
        } else {
            current += char;
        }
    }

    result.push(current.trim());
    return result;
}
*/

/**
 * Parsear CSV en formato Ita√∫ (el formato original)
 */
/*
function parseItauCSV(lines) {
    const expenses = [];

    for (let i = 0; i < lines.length; i++) {
        const line = lines[i].trim();

        // Saltar l√≠neas vac√≠as o headers
        if (!line || line.includes('Fecha Concepto D√©bito') || line.includes('Saldo anterior') ||
            line.includes('Saldo final') || line.includes('Moneda') || line.includes('Cr√©dito acordado') ||
            line.includes('Cheques depositados') || line.includes('T.E.A.') ||
            line.includes('Buscar') || line.includes('√öltimos 5 d√≠as') ||
            line.startsWith('https://') || line.includes('Ita√∫ Link')) {
            continue;
        }

        // Buscar l√≠neas que contengan "COMPRA" (gastos)
        if (line.includes('COMPRA')) {
            try {
                // Parsear l√≠nea de gasto usando regex
                // Formato esperado: "DD-MM-YY COMPRA DESCRIPCI√ìN MONTO SALDO"
                const expenseMatch = line.match(/"?(\d{2}-\d{2}-\d{2})\s+COMPRA\s+([^"]+)\s+([\d,.]+)\s+([\d,.]+)"?/);

                if (expenseMatch) {
                    const [, date, description, amountStr, balanceStr] = expenseMatch;

                    // Limpiar y convertir el monto
                    const amount = parseFloat(amountStr.replace(/\./g, '').replace(',', '.'));

                    // Detectar moneda autom√°ticamente seg√∫n el monto
                    const currency = amount < 150 ? 'USD' : 'UYU';

                    if (!isNaN(amount) && amount > 0) {
                        expenses.push({
                            date: date,
                            description: description.trim(),
                            amount: amount,
                            currency: currency,
                            balance: parseFloat(balanceStr.replace(/\./g, '').replace(',', '.'))
                        });
                    }
                }
            } catch (parseError) {
                console.warn(`‚ö†Ô∏è Error parseando l√≠nea ${i + 1}: ${line}`, parseError);
            }
        }
    }

    console.log(`üìÑ Total de gastos extra√≠dos del CSV Ita√∫: ${expenses.length}`);
    return expenses;
}
*/

/**
 * POST /api/public/ai/analyze-pdf
 * Analiza un PDF sin autenticaci√≥n (modo demo)
 */
router.post('/analyze-pdf', upload.single('pdf'), async (req, res) => {
    try {
        console.log('üìÑ === INICIANDO PROCESAMIENTO DE PDF ===');
        console.log('üìÑ Headers recibidos:', JSON.stringify(req.headers, null, 2));

        if (!req.file) {
            console.error('‚ùå No se recibi√≥ archivo PDF en la solicitud');
            return res.status(400).json({
                error: 'Archivo PDF requerido',
                message: 'Debes subir un archivo PDF para analizar'
            });
        }

        const filePath = req.file.path;
        const fileName = req.file.originalname;
        const fileSize = req.file.size;

        console.log(`üìÑ PDF recibido: ${fileName}`);
        console.log(`üìÑ Ruta del archivo: ${filePath}`);
        console.log(`üìÑ Tama√±o del archivo: ${fileSize} bytes`);
        console.log(`üìÑ Directorio de trabajo actual: ${process.cwd()}`);

        // Verificar que el archivo existe usando ruta absoluta
        const absoluteFilePath = path.resolve(filePath);
        console.log(`üìÑ Ruta absoluta del archivo: ${absoluteFilePath}`);

        if (!fs.existsSync(absoluteFilePath)) {
            console.error(`‚ùå Archivo no encontrado en el servidor: ${absoluteFilePath}`);
            console.error(`‚ùå Ruta relativa usada: ${filePath}`);
            return res.status(500).json({
                error: 'Archivo no encontrado',
                message: 'El archivo PDF no se guard√≥ correctamente en el servidor',
                details: {
                    rutaRelativa: filePath,
                    rutaAbsoluta: absoluteFilePath,
                    directorioTrabajo: process.cwd()
                }
            });
        }

        console.log('ü§ñ Verificando funcionamiento de OpenAI antes de procesar...');

        // Verificar que OpenAI est√© funcionando antes de proceder
        const openaiHealth = await checkOpenAIHealth();

        if (openaiHealth.status !== 'success') {
            console.error('‚ùå OpenAI no est√° funcionando:', openaiHealth.message);

            // Limpiar archivo temporal
            if (fs.existsSync(absoluteFilePath)) {
                fs.unlinkSync(absoluteFilePath);
                console.log('üßπ Archivo temporal eliminado por error OpenAI:', absoluteFilePath);
            }

            return res.status(503).json({
                error: 'Servicio de IA no disponible',
                message: 'OpenAI no est√° funcionando correctamente. No se puede analizar el PDF.',
                details: openaiHealth.message,
                timestamp: new Date().toISOString()
            });
        }

        console.log('‚úÖ OpenAI funcionando correctamente');

        // Verificar API Key del usuario desde el FormData
        const userApiKey = req.body.userApiKey || req.body.apiKey; // Puede venir de diferentes campos
        console.log('üîë API Key del usuario:', userApiKey ? 'Proporcionada por el cliente' : 'No proporcionada');

        // Verificar si tenemos API key (del servidor o del usuario)
        const serverApiKey = process.env.OPENAI_API_KEY;
        const effectiveApiKey = (userApiKey && userApiKey.startsWith('sk-')) ? userApiKey : serverApiKey;

        if (!effectiveApiKey || !effectiveApiKey.startsWith('sk-')) {
            console.error('‚ùå No hay API Key v√°lida disponible');

            // Limpiar archivo temporal
            if (fs.existsSync(absoluteFilePath)) {
                fs.unlinkSync(absoluteFilePath);
                console.log('üßπ Archivo temporal eliminado por falta de API Key:', absoluteFilePath);
            }

            return res.status(400).json({
                error: 'API Key requerida',
                message: 'Se requiere una API Key v√°lida de OpenAI para analizar PDFs.',
                details: 'Configura OPENAI_API_KEY en el servidor o proporciona tu propia API Key',
                timestamp: new Date().toISOString()
            });
        }

        console.log('üìÑ Iniciando procesamiento con pdfconverter.py...');

        // Verificar que el archivo existe y tiene contenido
        if (!fs.existsSync(absoluteFilePath)) {
            console.error(`‚ùå Archivo no encontrado: ${absoluteFilePath}`);
            return res.status(500).json({
                error: 'Archivo no encontrado',
                message: 'El archivo PDF no se guard√≥ correctamente en el servidor',
                details: {
                    rutaAbsoluta: absoluteFilePath,
                    rutaRelativa: filePath
                }
            });
        }

        // Ejecutar el script de Python pdfconverter.py
        console.log('üêç Ejecutando pdfconverter.py...');

        // Ejecutar Python directamente desde el entorno virtual usando execSync
        const pythonPath = path.join(__dirname, '../../venv/bin/python3');
        const scriptPath = path.join(__dirname, '../../funciones/pdfconverter.py');

        console.log('üêç Python path:', pythonPath);
        console.log('üêç Script path:', scriptPath);
        console.log('üêç File path:', absoluteFilePath);
        console.log('üêç Working directory:', path.join(__dirname, '../../'));

        let csvOutput = '';
        let exitCode = 0;

        try {
            const command = `"${pythonPath}" "${scriptPath}" "${absoluteFilePath}"`;
            console.log('üêç Ejecutando comando:', command);

            csvOutput = execSync(command, {
                cwd: path.join(__dirname, '../../'),
                encoding: 'utf-8',
                timeout: 30000, // 30 segundos timeout
                maxBuffer: 1024 * 1024 * 10 // 10MB buffer
            });

            console.log('‚úÖ Script Python ejecutado exitosamente');
            console.log('üìÑ Output length:', csvOutput.length);
            console.log('üìÑ Output preview:', csvOutput.substring(0, 100));

        } catch (error) {
            console.error('‚ùå Error ejecutando Python:', error);
            exitCode = error.status || 1;

            return res.status(500).json({
                error: 'Error procesando PDF',
                message: 'El script de Python fall√≥ al procesar el PDF',
                details: {
                    exitCode: exitCode,
                    error: error.message,
                    stderr: error.stderr ? error.stderr.toString() : '',
                    csvOutput: csvOutput.substring(0, 500) + (csvOutput.length > 500 ? '...' : '')
                }
            });
        }

        // Parsear el CSV resultante
        let expenses = [];
        let extractedText = '';
        let lines = [];
        let header = [];


        if (csvOutput && csvOutput.trim()) {
            try {
                // El CSV generado por pdfconverter.py ya tiene headers, parsearlo directamente
                lines = csvOutput.trim().split('\n');

                if (lines.length < 2) {
                    throw new Error('CSV no v√°lido: no hay suficientes l√≠neas');
                }

                // Parsear header y datos
                header = parseCSVLine(lines[0]);
                console.log('üìÑ Detected header:', header);
                expenses = [];

                // Detectar formato basado en las columnas
                const isOldFormat = header.includes('Tipo') && header.includes('Monto_UYU');
                const isNewTableFormat = header.includes('Concepto') && header.includes('D√©bito') && header.includes('Cr√©dito');

                console.log('üìÑ Format detected - Old format:', isOldFormat, 'New table format:', isNewTableFormat);

                for (let i = 1; i < lines.length; i++) {
                    // Parsear l√≠nea CSV correctamente manejando comillas
                    const values = parseCSVLine(lines[i]);

                    if (values.length >= header.length) {
                        const expense = {};
                        header.forEach((col, index) => {
                            expense[col.trim()] = values[index] ? values[index].trim() : '';
                        });

                        let amount = 0;
                        let currency = 'UYU';
                        let description = '';
                        let date = '';
                        let shouldInclude = false;

                        if (isOldFormat) {
                            // Formato antiguo: Fecha,Codigo,Descripcion,Cuotas,Monto_UYU,Monto_USD,Tipo
                            if (expense.Monto_UYU && expense.Monto_UYU !== '' && expense.Monto_UYU !== '0') {
                                amount = parseFloat(expense.Monto_UYU.replace(',', '.'));
                                currency = 'UYU';
                            } else if (expense.Monto_USD && expense.Monto_USD !== '' && expense.Monto_USD !== '0') {
                                amount = parseFloat(expense.Monto_USD.replace(',', '.'));
                                currency = 'USD';
                            }

                            shouldInclude = expense.Tipo === 'Transacci√≥n' && amount > 0;
                            description = expense.Descripcion;
                            date = expense.Fecha;

                        } else if (isNewTableFormat) {
                            // Formato nuevo: Fecha,Concepto,D√©bito,Cr√©dito,Saldo
                            description = expense.Concepto || '';
                            date = expense.Fecha || '';

                            // Solo procesar gastos (compras) - ignorar ingresos, rediba, saldos
                            if (description.includes('COMPRA') && expense.D√©bito && expense.D√©bito !== '' && expense.D√©bito !== '0') {
                                // Los montos parecen estar en centavos (113400.0 = 1,134.00)
                                const debitoValue = parseFloat(expense.D√©bito.replace(',', '.'));
                                if (debitoValue > 1000) { // Si es mayor a 1000, probablemente est√° en centavos
                                    amount = debitoValue / 100;
                                } else {
                                    amount = debitoValue;
                                }
                                currency = 'UYU';
                                shouldInclude = amount > 0;
                            }
                        }

                        // Solo incluir gastos v√°lidos
                        if (shouldInclude && amount > 0) {
                            expenses.push({
                                date: date,
                                description: description,
                                amount: amount,
                                currency: currency,
                                category: 'Otros'
                            });
                        }
                    } else {
                        console.log(`üìÑ Skipping line ${i} - not enough values`);
                    }
                }

                extractedText = csvOutput.substring(0, 500) + (csvOutput.length > 500 ? '...' : '');

                if (expenses.length === 0) {
                    console.warn('üö® No se encontraron gastos en el PDF procesado');

                    return res.status(400).json({
                        error: 'Sin gastos encontrados',
                        message: 'El PDF no contiene gastos v√°lidos para analizar',
                        details: {
                            csvOutput: extractedText,
                            suggestions: [
                                'Verifica que el PDF contenga transacciones bancarias',
                                'Aseg√∫rate de que sea un estado de cuenta v√°lido',
                                'El PDF debe contener informaci√≥n de gastos reconocible'
                            ]
                        },
                        timestamp: new Date().toISOString()
                    });
                }
            } catch (parseError) {
                console.error('‚ùå Error parseando CSV:', parseError);
                return res.status(500).json({
                    error: 'Error parseando resultado',
                    message: 'El CSV generado por Python no es v√°lido',
                    details: parseError.message
                });
            }
        } else {
            console.error('‚ùå El script Python no gener√≥ salida CSV');
            return res.status(500).json({
                error: 'Sin salida del script',
                message: 'El script de Python no gener√≥ ning√∫n resultado',
                details: {
                    errorOutput: errorOutput,
                    exitCode: exitCode
                }
            });
        }

        console.log('ü§ñ Iniciando an√°lisis con OpenAI...');

        let analysis;
        let analysisMode;

        // Solo usamos an√°lisis con OpenAI
        analysisMode = userApiKey ? 'openai_user' : 'openai_server';

        console.log('ü§ñ Enviando gastos extra√≠dos a OpenAI para an√°lisis...');

        // Crear respuesta directamente con todas las transacciones categorizadas
        // En lugar de depender de IA para listar todas, procesamos localmente
        const categorizedExpenses = expenses.map(expense => {
            // Categorizaci√≥n b√°sica basada en palabras clave
            const desc = expense.description.toLowerCase();
            let category = 'Otros Gastos';

            // Categorizaci√≥n para ambos formatos
            if (desc.includes('supermercado') || desc.includes('mercado') || desc.includes('alimentacion') ||
                desc.includes('comida') || desc.includes('restaurant') || desc.includes('carniceria')) {
                category = 'Alimentaci√≥n';
            } else if (desc.includes('combustible') || desc.includes('gasolina') || desc.includes('transporte') ||
                       desc.includes('taxi') || desc.includes('uber')) {
                category = 'Transporte';
            } else if (desc.includes('internet') || desc.includes('telefono') || desc.includes('luz') ||
                       desc.includes('agua') || desc.includes('gas') || desc.includes('cable')) {
                category = 'Servicios';
            } else if (desc.includes('cine') || desc.includes('juego') || desc.includes('streaming') ||
                       desc.includes('netflix') || desc.includes('hobby') || desc.includes('entretenimiento')) {
                category = 'Entretenimiento';
            } else if (desc.includes('medico') || desc.includes('farmacia') || desc.includes('seguro') ||
                       desc.includes('salud') || desc.includes('hospital')) {
                category = 'Salud';
            } else if (desc.includes('curso') || desc.includes('libro') || desc.includes('educacion') ||
                       desc.includes('udemy') || desc.includes('capacitacion')) {
                category = 'Educaci√≥n';
            } else if (desc.includes('ropa') || desc.includes('vestimenta') || desc.includes('zapato') ||
                       desc.includes('indumentaria')) {
                category = 'Ropa';
            }

            return {
                description: expense.description,
                amount: expense.amount,
                currency: expense.currency,
                category: category,
                date: expense.date,
                confidence: 0.8
            };
        });

        analysis = {
            expenses: categorizedExpenses,
            summary: {
                totalExpenses: categorizedExpenses.reduce((sum, exp) => sum + exp.amount, 0),
                currency: 'UYU',
                expenseCount: categorizedExpenses.length
            }
        };

        // Categorizaci√≥n completada localmente - no necesitamos IA para esto
        analysisMode = 'categorized_locally';
        console.log('‚úÖ Categorizaci√≥n local completada exitosamente');

        // Limpiar archivo temporal
        if (fs.existsSync(absoluteFilePath)) {
            fs.unlinkSync(absoluteFilePath);
            console.log('üßπ Archivo temporal eliminado:', absoluteFilePath);
        }

        res.json({
            success: true,
            data: {
                extractedExpenses: expenses,
                extractedText: extractedText,
                analysis: analysis,
                analysisMode: analysisMode,
                message: analysisMode === 'openai_server'
                    ? 'PDF analizado correctamente con OpenAI (API del servidor)'
                    : 'PDF analizado correctamente con OpenAI (tu API key)'
            }
        });

    } catch (error) {
        console.error('‚ùå Error analizando PDF p√∫blico:', error);
        console.error('‚ùå Stack trace:', error.stack);
        console.error('‚ùå Tipo de error:', error.constructor.name);
        console.error('‚ùå Mensaje de error completo:', error.message);
        console.error('‚ùå NODE_ENV actual:', process.env.NODE_ENV);

        // Limpiar archivo si existe
        try {
            if (req.file && req.file.path) {
                const cleanupPath = path.resolve(req.file.path);
                if (fs.existsSync(cleanupPath)) {
                    fs.unlinkSync(cleanupPath);
                    console.log('üßπ Archivo temporal limpiado:', cleanupPath);
                }
            }
        } catch (cleanupError) {
            console.error('‚ùå Error limpiando archivo temporal:', cleanupError);
        }

        // Determinar el tipo de error y respuesta apropiada
        let statusCode = 500;
        let errorMessage = 'Error interno del servidor';
        let showDetailsInProduction = false;

        if (error.message && error.message.includes('API Key')) {
            statusCode = 500;
            errorMessage = 'Configuraci√≥n de API incompleta';
        } else if (error.message && error.message.includes('fetch')) {
            statusCode = 503;
            errorMessage = 'Error de conexi√≥n con el servicio de IA';
        } else if (error.message && error.message.includes('timeout')) {
            statusCode = 504;
            errorMessage = 'Timeout en el procesamiento';
        } else if (error.message && error.message.includes('PDF')) {
            statusCode = 400;
            errorMessage = 'Error procesando el archivo PDF';
        } else if (error.message && (error.message.includes('L√≠mite de uso de OpenAI') || error.message.includes('rate limit'))) {
            // Para errores de rate limit, mostrar detalles siempre (son informativos)
            statusCode = 429;
            errorMessage = 'L√≠mite de uso de OpenAI excedido';
            showDetailsInProduction = true;
            console.log('üî• Detectado error de rate limit, mostrando detalles en producci√≥n');
        }

        const responseData = {
            error: error.constructor.name || 'Error interno del servidor',
            message: errorMessage,
            details: (process.env.NODE_ENV === 'development' || showDetailsInProduction) ? error.message : undefined,
            timestamp: new Date().toISOString()
        };

        console.error('üì§ Enviando respuesta de error:', JSON.stringify(responseData, null, 2));

        res.status(statusCode).json(responseData);
    }
});

/**
 * GET /api/public/ai/health
 * Verifica el estado de la conexi√≥n con OpenAI (p√∫blico)
 */
router.get('/health', async (req, res) => {
    try {
        console.log('üè• Verificando estado de OpenAI API (p√∫blico)...');
        const healthStatus = await checkOpenAIHealth();

        res.json({
            success: true,
            data: healthStatus,
            timestamp: new Date().toISOString(),
            message: 'Estado de OpenAI API verificado (modo demo)'
        });

    } catch (error) {
        console.error('‚ùå Error verificando estado de OpenAI:', error);
        res.status(500).json({
            error: 'Error interno del servidor',
            message: 'No se pudo verificar el estado de OpenAI'
        });
    }
});

// ==================== RUTAS PROTEGIDAS (REQUIEREN AUTENTICACI√ìN) ====================

/**
 * POST /api/ai/analyze-pdf-protected
 * Analiza PDF con IA (requiere autenticaci√≥n)
 */
router.post('/analyze-pdf-protected', authenticateToken, async (req, res) => {
    try {
        const { text } = req.body;

        if (!text) {
            return res.status(400).json({
                error: 'Texto requerido',
                message: 'Debes proporcionar texto para analizar'
            });
        }

        // Usar la funci√≥n real de an√°lisis con OpenAI
        console.log('üìÑ Iniciando an√°lisis de PDF con OpenAI...');
        const analysis = await analyzeTextWithAI(text, req.user?.id || 'anonymous');

        res.json({
            success: true,
            data: analysis
        });

    } catch (error) {
        console.error('‚ùå Error analizando PDF:', error);
        res.status(500).json({
            error: 'Error interno del servidor',
            message: 'No se pudo analizar el PDF'
        });
    }
});

/**
 * POST /api/public/ai/chat
 * Chat con IA sin autenticaci√≥n (modo demo)
 */
router.post('/chat', async (req, res) => {
    try {
        const { message } = req.body;

        if (!message) {
            return res.status(400).json({
                error: 'Mensaje requerido',
                message: 'Debes proporcionar un mensaje'
            });
        }

        // Usar OpenAI para generar respuesta del chat (modo demo)
        console.log('üí¨ Procesando mensaje del chat con OpenAI (modo demo)...');

        // Contexto simplificado para modo demo
        const financialContext = {
            totalIncome: 0,
            totalExpenses: 0,
            balance: 0,
            goalsCount: 0,
            categoriesCount: 0
        };

        const systemPrompt = `Eres un asesor financiero virtual especializado en ayudar a las personas a gestionar mejor su dinero.

INSTRUCCIONES IMPORTANTES:
- Responde de manera profesional pero accesible
- Proporciona consejos pr√°cticos y accionables
- S√© espec√≠fico con n√∫meros y estrategias cuando sea posible
- Recomienda siempre estrategias conservadoras primero
- Mant√©n un tono amigable y motivador

Contexto financiero del usuario (modo demo):
- Ingresos mensuales: $${financialContext.totalIncome}
- Gastos mensuales: $${financialContext.totalExpenses}
- Balance: $${financialContext.balance}
- Metas activas: ${financialContext.goalsCount}
- Categor√≠as: ${financialContext.categoriesCount}

IMPORTANTE: Lista TODAS las transacciones (no resumas ni selecciones "principales"). Incluye todas las l√≠neas proporcionadas. No omitas ninguna.

`;

        // Preparar la solicitud a OpenAI
        const controller = new AbortController();
        const timeoutId = setTimeout(() => controller.abort(), 25000); // 25 segundos timeout

        try {
            const openaiResponse = await fetch('https://api.openai.com/v1/chat/completions', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${process.env.OPENAI_API_KEY}`
                },
                body: JSON.stringify({
                    model: 'gpt-4o-mini',
                    messages: [
                        {
                            role: 'system',
                            content: systemPrompt
                        },
                        {
                            role: 'user',
                            content: message
                        }
                    ],
                    max_tokens: 8000,
                    temperature: 0.7
                }),
                signal: controller.signal
            });

            clearTimeout(timeoutId);

            if (!openaiResponse.ok) {
                throw new Error(`Error en OpenAI API: ${openaiResponse.status}`);
            }

            const data = await openaiResponse.json();
            const aiMessage = data.choices[0].message.content;

            res.json({
                success: true,
                message: 'Consulta procesada correctamente (modo demo)',
                data: {
                    response: aiMessage,
                    timestamp: new Date().toISOString(),
                    mode: 'demo'
                }
            });

        } catch (innerError) {
            console.error('‚ùå Error interno en chat con OpenAI:', innerError);
            res.status(500).json({
                success: false,
                message: 'Error procesando la consulta con IA (modo demo)',
                data: {
                    response: 'Lo siento, no pude procesar tu consulta en este momento. Por favor, verifica tu conexi√≥n e intenta nuevamente.',
                    timestamp: new Date().toISOString(),
                    mode: 'demo'
                }
            });
        }

    } catch (error) {
        console.error('‚ùå Error en chat con IA:', error);
        res.status(500).json({
            error: 'Error interno del servidor',
            message: 'No se pudo procesar el mensaje'
        });
    }
});

/**
 * POST /api/public/ai/diagnose-goals
 * Diagn√≥stico financiero con IA - an√°lisis profesional de finanzas personales
 */
router.post('/diagnose-goals', async (req, res) => {
    try {
       
        const { financialData, diagnosisType } = req.body;

        if (!financialData) {
            return res.status(400).json({
                error: 'Datos financieros requeridos',
                message: 'Debes proporcionar datos financieros para el diagn√≥stico'
            });
        }

        // Verificar que OpenAI est√© funcionando antes de proceder
        const openaiHealth = await checkOpenAIHealth();

        if (openaiHealth.status !== 'success') {
            return res.status(503).json({
                error: 'Servicio de IA no disponible',
                message: 'OpenAI no est√° funcionando correctamente. No se puede realizar el diagn√≥stico.',
                details: openaiHealth.message,
                timestamp: new Date().toISOString()
            });
        }


        // Verificar API Key del servidor
        const serverApiKey = process.env.OPENAI_API_KEY;

        if (!serverApiKey || !serverApiKey.startsWith('sk-')) {
            
            return res.status(500).json({
                error: 'API Key requerida',
                message: 'Se requiere una API Key v√°lida de OpenAI para el diagn√≥stico.',
                details: 'Configura OPENAI_API_KEY en el servidor',
                timestamp: new Date().toISOString()
            });
        }

        // Preparar contexto financiero para el diagn√≥stico
        const financialContext = formatFinancialDataForDiagnosis(financialData);

        // Crear prompt espec√≠fico para diagn√≥stico financiero
        const systemPrompt = `Eres un Profesional en Finanzas Personales con m√°s de 15 a√±os de experiencia asesorando a individuos y familias en Uruguay.

Tu especializaci√≥n incluye:
- Diagn√≥stico completo de situaciones financieras
- Identificaci√≥n de patrones de gasto problem√°ticos
- Recomendaciones personalizadas de ahorro e inversi√≥n
- Estrategias de reducci√≥n de deudas
- Planificaci√≥n financiera a corto y largo plazo
- Optimizaci√≥n de presupuestos familiares
- Asesoramiento en metas de ahorro

INSTRUCCIONES ESPEC√çFICAS PARA ESTE DIAGN√ìSTICO:
1. Analiza la situaci√≥n financiera actual del usuario de manera profesional y detallada
2. Identifica fortalezas y √°reas de mejora en su econom√≠a
3. Proporciona consejos pr√°cticos y accionables para mejorar su situaci√≥n financiera
4. Prioriza estrategias conservadoras y realistas para el contexto uruguayo
5. Incluye recomendaciones espec√≠ficas sobre ahorro, inversi√≥n y reducci√≥n de gastos
6. Considera el contexto econ√≥mico local (tasas de cambio, inflaci√≥n, etc.)
7. S√© espec√≠fico con n√∫meros, porcentajes y plazos realistas
8. Mant√©n un tono profesional pero accesible y motivador

IMPORTANTE:
- Estructura tu respuesta de manera clara: Diagn√≥stico, Fortalezas, √Åreas de Mejora, Recomendaciones Espec√≠ficas
- Incluye metas SMART (Specific, Measurable, Achievable, Relevant, Time-bound)
- Considera la situaci√≥n econ√≥mica actual de Uruguay
- S√© realista pero optimista en tus proyecciones

Responde como un asesor financiero profesional especializado en finanzas personales en Uruguay.`;

        const userPrompt = `Por favor, realiza un diagn√≥stico completo de mi situaci√≥n financiera basado en los siguientes datos:

${financialContext}

Necesito que me ayudes a:
1. Analizar mi situaci√≥n financiera actual
2. Identificar oportunidades de mejora
3. Darme consejos espec√≠ficos para ahorrar m√°s dinero
4. Recomendar metas de ahorro realistas
5. Sugerir estrategias para optimizar mis finanzas

Por favor, s√© espec√≠fico y incluye recomendaciones pr√°cticas que pueda implementar inmediatamente.`;

        // Preparar la solicitud a OpenAI
        const controller = new AbortController();
        const timeoutId = setTimeout(() => controller.abort(), 45000); // 45 segundos timeout para diagn√≥sticos m√°s complejos

        try {
            const openaiResponse = await fetch('https://api.openai.com/v1/chat/completions', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${serverApiKey}`
                },
                body: JSON.stringify({
                    model: 'gpt-4o-mini',
                    messages: [
                        {
                            role: 'system',
                            content: systemPrompt
                        },
                        {
                            role: 'user',
                            content: userPrompt
                        }
                    ],
                    max_tokens: 12000,
                    temperature: 0.7
                }),
                signal: controller.signal
            });

            clearTimeout(timeoutId);

            if (!openaiResponse.ok) {
                throw new Error(`Error en OpenAI API: ${openaiResponse.status}`);
            }

            const data = await openaiResponse.json();
            const diagnosis = data.choices[0].message.content;

         

            res.json({
                success: true,
                data: {
                    analysis: diagnosis,
                    diagnosisType: diagnosisType || 'financial_advisor',
                    timestamp: new Date().toISOString(),
                    message: 'Diagn√≥stico financiero completado exitosamente'
                }
            });

        } catch (innerError) {
          

            if (innerError.name === 'AbortError') {
                throw new Error('Timeout en el procesamiento del diagn√≥stico');
            }

            res.status(500).json({
                success: false,
                message: 'Error procesando el diagn√≥stico con IA',
                data: {
                    response: 'Lo siento, no pude completar el diagn√≥stico en este momento. Por favor, verifica tu conexi√≥n e intenta nuevamente.',
                    timestamp: new Date().toISOString(),
                    diagnosisType: diagnosisType || 'financial_advisor'
                }
            });
        }

    } catch (error) {

        // Determinar el tipo de error y respuesta apropiada
        let statusCode = 500;
        let errorMessage = 'Error interno del servidor';

        if (error.message && error.message.includes('API Key')) {
            statusCode = 500;
            errorMessage = 'Configuraci√≥n de API incompleta';
        } else if (error.message && error.message.includes('fetch')) {
            statusCode = 503;
            errorMessage = 'Error de conexi√≥n con el servicio de IA';
        } else if (error.message && error.message.includes('timeout')) {
            statusCode = 504;
            errorMessage = 'Timeout en el procesamiento del diagn√≥stico';
        } else if (error.message && error.message.includes('AbortError')) {
            statusCode = 504;
            errorMessage = 'Timeout en el procesamiento del diagn√≥stico';
        }

        const responseData = {
            error: error.constructor.name || 'Error interno del servidor',
            message: errorMessage,
            details: (process.env.NODE_ENV === 'development') ? error.message : undefined,
            timestamp: new Date().toISOString()
        };


        res.status(statusCode).json(responseData);
    }
});

/**
 * Funci√≥n auxiliar para formatear datos financieros para diagn√≥stico
 */
function formatFinancialDataForDiagnosis(financialData) {
    let formattedText = '';

    try {
        // Resumen financiero
        if (financialData.summary) {
            formattedText += `RESUMEN FINANCIERO ACTUAL:\n`;
            formattedText += `- Ingresos UYU: $${financialData.summary.totalIncomeUYU?.toFixed(2) || '0.00'}\n`;
            formattedText += `- Gastos UYU: $${financialData.summary.totalExpensesUYU?.toFixed(2) || '0.00'}\n`;
            formattedText += `- Balance UYU: $${financialData.summary.balanceUYU?.toFixed(2) || '0.00'}\n`;
            formattedText += `- Ingresos USD: $${financialData.summary.totalIncomeUSD?.toFixed(2) || '0.00'}\n`;
            formattedText += `- Gastos USD: $${financialData.summary.totalExpensesUSD?.toFixed(2) || '0.00'}\n`;
            formattedText += `- Balance USD: $${financialData.summary.balanceUSD?.toFixed(2) || '0.00'}\n`;
            formattedText += `- Per√≠odo actual: ${financialData.summary.currentPeriod || 'No especificado'}\n\n`;
        }

        // Metas activas
        if (financialData.goals && financialData.goals.length > 0) {
            formattedText += `METAS DE AHORRO ACTIVAS:\n`;
            financialData.goals.forEach((goal, index) => {
                formattedText += `${index + 1}. ${goal.name || 'Sin nombre'}\n`;
                formattedText += `   - Monto objetivo: $${goal.amount?.toFixed(2) || '0.00'}\n`;
                formattedText += `   - Ya ahorrado: $${goal.currentSaved?.toFixed(2) || '0.00'}\n`;
                formattedText += `   - Fecha l√≠mite: ${goal.deadline ? new Date(goal.deadline).toLocaleDateString('es-UY') : 'Sin fecha'}\n`;
                if (goal.description) {
                    formattedText += `   - Descripci√≥n: ${goal.description}\n`;
                }
                formattedText += '\n';
            });
        } else {
            formattedText += `METAS DE AHORRO: No hay metas activas registradas.\n\n`;
        }

        // Transacciones recientes (√∫ltimas 20)
        if (financialData.transactions && financialData.transactions.length > 0) {
            formattedText += `TRANSACCIONES RECIENTES:\n`;
            const recentTransactions = financialData.transactions.slice(-20); // √öltimas 20 transacciones

            recentTransactions.forEach((transaction, index) => {
                const type = transaction.type === 'income' ? 'INGRESO' : 'GASTO';
                const currency = transaction.currency || 'UYU';
                formattedText += `${index + 1}. ${type} - ${transaction.description || 'Sin descripci√≥n'}\n`;
                formattedText += `   - Monto: ${currency} $${transaction.amount?.toFixed(2) || '0.00'}\n`;
                formattedText += `   - Fecha: ${transaction.date ? new Date(transaction.date).toLocaleDateString('es-UY') : 'Sin fecha'}\n`;
                if (transaction.category) {
                    formattedText += `   - Categor√≠a: ${transaction.category}\n`;
                }
                formattedText += '\n';
            });
        } else {
            formattedText += `TRANSACCIONES: No hay transacciones registradas.\n\n`;
        }

        // Categor√≠as
        if (financialData.categories && financialData.categories.length > 0) {
            formattedText += `CATEGOR√çAS CONFIGURADAS:\n`;
            financialData.categories.forEach((category, index) => {
                formattedText += `${index + 1}. ${category.name || 'Sin nombre'} (${category.type || 'No especificado'})\n`;
                if (category.description) {
                    formattedText += `   - Descripci√≥n: ${category.description}\n`;
                }
            });
            formattedText += '\n';
        }

    } catch (error) {
        console.warn('Error formateando datos financieros:', error);
        formattedText = 'Error procesando datos financieros proporcionados.';
    }

    return formattedText;
}

/**
 * POST /api/ai/advanced-query
 * Procesa consultas avanzadas con acceso completo a datos del usuario
 * Requiere autenticaci√≥n
 */
router.post('/advanced-query', authenticateToken, async (req, res) => {
    try {
        const { query, additionalData } = req.body;

        if (!query) {
            return res.status(400).json({
                error: 'Consulta requerida',
                message: 'Debes proporcionar una consulta para procesar'
            });
        }

        console.log('üß† Procesando consulta avanzada para usuario:', req.user.username);

        const result = await processAdvancedQuery(query, req.user.id, additionalData);

        res.json({
            success: true,
            data: result,
            message: 'Consulta avanzada procesada exitosamente'
        });

    } catch (error) {
        console.error('‚ùå Error en consulta avanzada:', error);
        res.status(500).json({
            error: 'Error interno del servidor',
            message: 'No se pudo procesar la consulta avanzada',
            details: process.env.NODE_ENV === 'development' ? error.message : undefined
        });
    }
});

/**
 * POST /api/ai/complete-diagnosis
 * Realiza diagn√≥stico financiero completo con acceso a todos los datos
 * Requiere autenticaci√≥n
 */
router.post('/complete-diagnosis', authenticateToken, async (req, res) => {
    try {
        const { additionalData } = req.body;

        console.log('üîç Realizando diagn√≥stico completo para usuario:', req.user.username);

        const result = await performCompleteFinancialDiagnosis(req.user.id, additionalData);

        res.json({
            success: true,
            data: result,
            message: 'Diagn√≥stico financiero completo realizado exitosamente'
        });

    } catch (error) {
        console.error('‚ùå Error en diagn√≥stico completo:', error);
        res.status(500).json({
            error: 'Error interno del servidor',
            message: 'No se pudo realizar el diagn√≥stico completo',
            details: process.env.NODE_ENV === 'development' ? error.message : undefined
        });
    }
});

/**
 * GET /api/ai/user-data-summary
 * Obtiene resumen de datos del usuario para contexto de IA
 * Requiere autenticaci√≥n
 */
router.get('/user-data-summary', authenticateToken, async (req, res) => {
    try {
        console.log('üìä Obteniendo resumen de datos para usuario:', req.user.username);

        const userData = await getCompleteUserData(req.user.id);

        // Crear versi√≥n resumida para el frontend (sin datos sensibles)
        const summary = {
            user: {
                name: `${userData.user.firstName} ${userData.user.lastName}`,
                currency: userData.user.currency,
                memberSince: userData.user.createdAt
            },
            summary: userData.summary,
            recentTransactions: userData.transactions.recent.slice(0, 10),
            activeGoals: userData.goals.filter(g => !g.completed),
            topCategories: userData.transactions.categoryStats
                .filter(cat => cat._id && typeof cat._id === 'object' && cat._id.type === 'expense')
                .sort((a, b) => (b.totalAmount || 0) - (a.totalAmount || 0))
                .slice(0, 5)
        };

        res.json({
            success: true,
            data: summary,
            message: 'Resumen de datos obtenido exitosamente'
        });

    } catch (error) {
        console.error('‚ùå Error obteniendo resumen de datos:', error);
        res.status(500).json({
            error: 'Error interno del servidor',
            message: 'No se pudo obtener el resumen de datos',
            details: process.env.NODE_ENV === 'development' ? error.message : undefined
        });
    }
});

/**
 * GET /api/ai/context
 * Genera contexto detallado para consultas de IA
 * Requiere autenticaci√≥n
 */
router.get('/context', authenticateToken, async (req, res) => {
    try {
        const { type } = req.query;
        console.log('üìù Generando contexto de IA para usuario:', req.user.username);

        const context = await generateAIContext(req.user.id, type || 'general');

        res.json({
            success: true,
            data: {
                context: context,
                type: type || 'general',
                timestamp: new Date().toISOString()
            },
            message: 'Contexto de IA generado exitosamente'
        });

    } catch (error) {
        console.error('‚ùå Error generando contexto:', error);
        res.status(500).json({
            error: 'Error interno del servidor',
            message: 'No se pudo generar el contexto de IA',
            details: process.env.NODE_ENV === 'development' ? error.message : undefined
        });
    }
});

/**
 * POST /api/public/ai/enhanced-chat
 * Chat mejorado con acceso a datos completos del usuario
 * Versi√≥n p√∫blica (sin autenticaci√≥n) pero con datos limitados
 */
router.post('/enhanced-chat', async (req, res) => {
    try {
        const { message, userData } = req.body;

        if (!message) {
            return res.status(400).json({
                error: 'Mensaje requerido',
                message: 'Debes proporcionar un mensaje'
            });
        }

        console.log('üí¨ Procesando chat mejorado (modo p√∫blico)');

        // Verificar que OpenAI est√© funcionando
        const openaiHealth = await checkOpenAIHealth();
        if (openaiHealth.status !== 'success') {
            return res.status(503).json({
                error: 'Servicio de IA no disponible',
                message: 'OpenAI no est√° funcionando correctamente',
                details: openaiHealth.message
            });
        }

        // Crear contexto limitado para modo p√∫blico
        let context = '';
        if (userData) {
            context = `Usuario: ${userData.name || 'Usuario an√≥nimo'}\n`;
            context += `Moneda: ${userData.currency || 'UYU'}\n\n`;

            if (userData.summary) {
                context += `Resumen financiero:\n`;
                context += `- Ingresos: $${userData.summary.totalIncome || 0}\n`;
                context += `- Gastos: $${userData.summary.totalExpenses || 0}\n`;
                context += `- Balance: $${userData.summary.balance || 0}\n\n`;
            }

            if (userData.recentTransactions && userData.recentTransactions.length > 0) {
                context += `Transacciones recientes:\n`;
                userData.recentTransactions.slice(0, 5).forEach((t, i) => {
                    context += `${i + 1}. ${t.type === 'income' ? 'Ingreso' : 'Gasto'}: $${t.amount} - ${t.description}\n`;
                });
                context += '\n';
            }
        }

        const systemPrompt = `Eres un Asistente Financiero Inteligente especializado en finanzas personales.

        INSTRUCCIONES:
        1. Responde de manera clara, profesional y √∫til
        2. Usa los datos proporcionados cuando est√©n disponibles
        3. Da consejos pr√°cticos y accionables
        4. Mant√©n un tono amigable y motivador
        5. Si no tienes informaci√≥n espec√≠fica, da consejos generales √∫tiles
        6. Incluye emojis para hacer las respuestas m√°s amigables

        CONTEXTO DISPONIBLE:
        ${context || 'Informaci√≥n limitada disponible (modo p√∫blico)'}`;

        const userPrompt = `Consulta: ${message}`;

        // Preparar solicitud a OpenAI
        const controller = new AbortController();
        const timeoutId = setTimeout(() => controller.abort(), 25000);

        const response = await fetch('https://api.openai.com/v1/chat/completions', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${process.env.OPENAI_API_KEY}`
            },
            body: JSON.stringify({
                model: 'gpt-4o-mini',
                messages: [
                    { role: 'system', content: systemPrompt },
                    { role: 'user', content: userPrompt }
                ],
                max_tokens: 1500,
                temperature: 0.7
            }),
            signal: controller.signal
        });

        clearTimeout(timeoutId);

        if (!response.ok) {
            throw new Error(`Error en OpenAI API: ${response.status}`);
        }

        const data = await response.json();
        const aiMessage = data.choices[0].message.content;

        res.json({
            success: true,
            message: 'Chat mejorado procesado correctamente',
            data: {
                response: aiMessage,
                contextUsed: !!context,
                mode: 'enhanced_public',
                timestamp: new Date().toISOString()
            }
        });

    } catch (error) {
        console.error('‚ùå Error en chat mejorado:', error);
        res.status(500).json({
            success: false,
            message: 'Error procesando el mensaje mejorado',
            data: {
                response: 'Lo siento, no pude procesar tu mensaje en este momento. Por favor, verifica tu conexi√≥n e intenta nuevamente.',
                timestamp: new Date().toISOString()
            }
        });
    }
});

/**
 * GET /api/config/openai-key
 * Obtiene la API key de OpenAI para el chat de cannabis (requiere autenticaci√≥n)
 * Devuelve la API key si est√° configurada en el servidor
 */
router.get('/config/openai-key', authenticateToken, async (req, res) => {
    try {
        console.log('üîë Solicitando API key de OpenAI para usuario:', req.user.username);

        // Obtener API key del servidor
        const serverApiKey = process.env.OPENAI_API_KEY;

        if (!serverApiKey) {
            return res.status(404).json({
                success: false,
                message: 'API Key de OpenAI no configurada en el servidor',
                details: 'Configura OPENAI_API_KEY en las variables de entorno del servidor'
            });
        }

        // Validar formato de la API key
        if (!serverApiKey.startsWith('sk-')) {
            return res.status(400).json({
                success: false,
                message: 'API Key de OpenAI tiene formato inv√°lido',
                details: 'La API key debe comenzar con "sk-"'
            });
        }

        // Devolver la API key (solo para uso interno del frontend)
        res.json({
            success: true,
            apiKey: serverApiKey,
            message: 'API Key obtenida exitosamente',
            timestamp: new Date().toISOString()
        });

    } catch (error) {
        console.error('‚ùå Error obteniendo API key:', error);
        res.status(500).json({
            success: false,
            message: 'Error interno del servidor',
            details: process.env.NODE_ENV === 'development' ? error.message : undefined
        });
    }
});

/**
 * POST /api/public/ai/analyze-image
 * Analiza una imagen usando GPT-4 Vision (versi√≥n p√∫blica)
 */
router.post('/analyze-image', async (req, res) => {
    try {
        const { imageData, description, cultivoId } = req.body;

        if (!imageData) {
            return res.status(400).json({
                error: 'Imagen requerida',
                message: 'Debes proporcionar los datos de la imagen para analizar'
            });
        }

        console.log('üñºÔ∏è Analizando imagen con GPT-4 Vision (modo p√∫blico)');

        // Verificar que OpenAI est√© funcionando
        const serverApiKey = process.env.OPENAI_API_KEY;
        if (!serverApiKey) {
            return res.status(404).json({
                error: 'API Key requerida',
                message: 'Se requiere una API Key v√°lida de OpenAI para an√°lisis de im√°genes'
            });
        }

        // Procesar la imagen
        let processedImageData = imageData;
        if (!imageData.startsWith('data:image/')) {
            processedImageData = `data:image/jpeg;base64,${imageData}`;
        }

        // Crear prompt del sistema para an√°lisis de im√°genes
        const systemPrompt = `Eres Bruce Bugbee, profesor profesional y especialista en cannabis medicinal de la Universidad de Utah.
Tiene m√°s de 25 a√±os de experiencia en cultivo medicinal, investigaci√≥n cient√≠fica y educaci√≥n sobre cannabis terap√©utico.

INSTRUCCIONES ESPEC√çFICAS PARA AN√ÅLISIS VISUAL:
- Analiza detalladamente el estado visual de las plantas de cannabis
- Identifica posibles problemas: deficiencias nutricionales, plagas, enfermedades, estr√©s
- Eval√∫a el estado de desarrollo y madurez de las plantas
- Examina el color, textura y forma de las hojas
- Verifica la estructura general de la planta y ramificaci√≥n
- Identifica signos de sobre-riego, bajo-riego, o problemas ambientales
- Proporciona diagn√≥sticos espec√≠ficos basados en evidencia visual
- Incluye recomendaciones de tratamiento org√°nico y preventivas
- S√© espec√≠fico sobre qu√© aspectos visuales te indican cada conclusi√≥n
- Mant√©n un tono profesional pero accesible y educativo

IMPORTANTE: Base tu an√°lisis en evidencia visual cient√≠fica.`;

        // Crear el mensaje del usuario con la imagen
        const userMessage = {
            role: 'user',
            content: [
                {
                    type: 'text',
                    text: `Analiza esta imagen de mi cultivo de cannabis medicinal:

DESCRIPCI√ìN PROPORCIONADA: ${description || 'Imagen del cultivo actual para an√°lisis visual'}

Por favor, proporciona un an√°lisis detallado y profesional basado en lo que observas en la imagen.`
                },
                {
                    type: 'image_url',
                    image_url: {
                        url: processedImageData,
                        detail: 'high'
                    }
                }
            ]
        };

        console.log('üöÄ Enviando imagen a GPT-4 Vision...');

        // Preparar solicitud a OpenAI con GPT-4 Vision
        const response = await fetch(`${process.env.OPENAI_API_BASE_URL || 'https://api.openai.com/v1'}/chat/completions`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${serverApiKey}`
            },
            body: JSON.stringify({
                model: 'gpt-4o',
                messages: [
                    {
                        role: 'system',
                        content: systemPrompt
                    },
                    userMessage
                ],
                max_tokens: 1500,
                temperature: 0.3
            })
        });

        if (!response.ok) {
            const errorData = await response.json().catch(() => ({}));
            console.error('‚ùå Error en GPT-4 Vision API:', response.status, errorData);

            return res.status(response.status).json({
                success: false,
                message: 'Error procesando la imagen con GPT-4 Vision',
                error: errorData.error?.message || 'Error de API',
                details: `C√≥digo de error: ${response.status}`
            });
        }

        const data = await response.json();
        const aiResponse = data.choices[0].message.content;

        console.log('‚úÖ An√°lisis visual completado exitosamente');

        res.json({
            success: true,
            message: aiResponse,
            metadata: {
                imageAnalysis: true,
                visualAnalysisAvailable: true,
                modelUsed: 'gpt-4o',
                timestamp: new Date().toISOString(),
                tokensUsed: data.usage?.total_tokens || 'N/A'
            }
        });

    } catch (error) {
        console.error('‚ùå Error analizando imagen:', error);
        res.status(500).json({
            success: false,
            message: 'Error interno del servidor',
            error: error.message,
            details: 'Hubo un problema t√©cnico procesando la imagen'
        });
    }
});

/**
 * GET /api/public/ai/debug-auth
 * Endpoint de debug para verificar estado de autenticaci√≥n
 */
router.get('/debug-auth', (req, res) => {
    res.json({
        success: true,
        auth: {
            headers: req.headers.authorization ? 'Presente' : 'Ausente',
            user: req.user ? 'Presente' : 'Ausente',
            userId: req.userId || 'No disponible',
            token: req.headers.authorization ? 'Token presente en headers' : 'No hay token en headers'
        },
        timestamp: new Date().toISOString()
    });
});

/**
 * GET /api/public/ai/check-vision-support
 * Verifica si la API key actual soporta GPT-4 Vision (versi√≥n p√∫blica)
 */
router.get('/check-vision-support', async (req, res) => {
    try {
        console.log('üîç Verificando soporte de GPT-4 Vision (modo p√∫blico)...');

        // Obtener API key del servidor
        const serverApiKey = process.env.OPENAI_API_KEY;

        if (!serverApiKey) {
            return res.status(404).json({
                success: false,
                message: 'API Key de OpenAI no configurada',
                visionSupport: false,
                details: 'No hay API key configurada en el servidor'
            });
        }

        // Verificar formato de la API key
        if (!serverApiKey.startsWith('sk-')) {
            return res.status(400).json({
                success: false,
                message: 'API Key tiene formato inv√°lido',
                visionSupport: false,
                details: 'La API key debe comenzar con "sk-"'
            });
        }

        console.log('üîë Verificando modelos disponibles con la API key...');

        // Intentar obtener la lista de modelos disponibles
        const modelsResponse = await fetch('https://api.openai.com/v1/models', {
            method: 'GET',
            headers: {
                'Authorization': `Bearer ${serverApiKey}`
            }
        });

        if (!modelsResponse.ok) {
            const errorData = await modelsResponse.json().catch(() => ({}));
            console.error('‚ùå Error verificando modelos:', modelsResponse.status, errorData);

            return res.status(modelsResponse.status).json({
                success: false,
                message: 'Error verificando modelos disponibles',
                visionSupport: false,
                error: errorData.error?.message || 'Error de API',
                details: `C√≥digo de error: ${modelsResponse.status}`
            });
        }

        const modelsData = await modelsResponse.json();
        const availableModels = modelsData.data.map(model => model.id);

        console.log('üìã Modelos disponibles:', availableModels);

        // Modelos que soportan visi√≥n
        const visionModels = ['gpt-4o', 'gpt-4-vision-preview', 'gpt-4-turbo'];

        // Verificar si tiene acceso a modelos de visi√≥n
        const hasVisionSupport = visionModels.some(model => availableModels.includes(model));

        // Informaci√≥n detallada sobre el soporte
        const visionSupportDetails = {
            gpt4o: availableModels.includes('gpt-4o'),
            gpt4VisionPreview: availableModels.includes('gpt-4-vision-preview'),
            gpt4Turbo: availableModels.includes('gpt-4-turbo')
        };

        // Verificar l√≠mites de uso si es posible
        let usageLimits = null;
        try {
            // Hacer una petici√≥n de prueba con GPT-4o para verificar l√≠mites
            if (hasVisionSupport) {
                const testResponse = await fetch('https://api.openai.com/v1/chat/completions', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': `Bearer ${serverApiKey}`
                    },
                    body: JSON.stringify({
                        model: 'gpt-4o',
                        messages: [{ role: 'user', content: 'Test' }],
                        max_tokens: 10
                    })
                });

                if (testResponse.status === 429) {
                    // Rate limit alcanzado
                    const retryAfter = testResponse.headers.get('retry-after');
                    usageLimits = {
                        rateLimited: true,
                        retryAfter: retryAfter,
                        message: 'API key tiene l√≠mites de uso activos'
                    };
                } else if (testResponse.ok) {
                    usageLimits = {
                        rateLimited: false,
                        message: 'API key funcional y sin l√≠mites activos'
                    };
                }
            }
        } catch (testError) {
            console.warn('‚ö†Ô∏è No se pudo verificar l√≠mites de uso:', testError.message);
        }

        const response = {
            success: true,
            visionSupport: hasVisionSupport,
            apiKeyConfigured: true,
            availableModels: visionModels.filter(model => availableModels.includes(model)),
            allModels: availableModels,
            usageLimits: usageLimits,
            details: hasVisionSupport
                ? '‚úÖ Tu API key soporta an√°lisis de im√°genes con GPT-4 Vision'
                : '‚ùå Tu API key NO soporta an√°lisis de im√°genes con GPT-4 Vision'
        };

        // Agregar recomendaciones si no tiene soporte
        if (!hasVisionSupport) {
            response.recommendations = [
                'Actualiza tu plan de OpenAI a uno que incluya GPT-4 Vision',
                'Los planes "Plus" o superiores incluyen acceso a GPT-4 Vision',
                'Puedes verificar tu plan actual en https://platform.openai.com/account/billing',
                'Mientras tanto, puedes usar el an√°lisis basado en descripci√≥n de texto'
            ];

            // Verificar si tiene acceso a GPT-4 sin visi√≥n
            const hasGpt4Access = availableModels.some(model =>
                model.includes('gpt-4') && !visionModels.includes(model)
            );

            if (hasGpt4Access) {
                response.alternative = 'Tu API key tiene acceso a GPT-4 pero no a la versi√≥n con visi√≥n. Para an√°lisis de im√°genes necesitas espec√≠ficamente GPT-4 Vision.';
            }
        }

        console.log('‚úÖ Verificaci√≥n de soporte de visi√≥n completada:', response.visionSupport);

        res.json(response);

    } catch (error) {
        console.error('‚ùå Error verificando soporte de visi√≥n:', error);
        res.status(500).json({
            success: false,
            message: 'Error verificando soporte de GPT-4 Vision',
            visionSupport: false,
            error: error.message,
            details: 'Hubo un problema t√©cnico verificando la compatibilidad'
        });
    }
});

// ==================== EXPORTAR ROUTER ====================

module.exports = router;
